
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030e0  080030e0  000040e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003104  08003104  0000503c  2**0
                  CONTENTS
  4 .ARM          00000000  08003104  08003104  0000503c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003104  08003104  0000503c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003104  08003104  00004104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003108  08003108  00004108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  0800310c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  2000003c  08003148  0000503c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08003148  0000541c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000897f  00000000  00000000  00005065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dfa  00000000  00000000  0000d9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0000f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000841  00000000  00000000  000102c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017474  00000000  00000000  00010b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d91c  00000000  00000000  00027f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008282b  00000000  00000000  00035899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b80c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a70  00000000  00000000  000b8108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000bab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030c8 	.word	0x080030c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	080030c8 	.word	0x080030c8

0800014c <isButtonPressed>:
	HAL_GPIO_WritePin(BUTTON_1_GPIO_Port, BUTTON_1_Pin, RELEASE_STATE);
	HAL_GPIO_WritePin(BUTTON_2_GPIO_Port, BUTTON_2_Pin, RELEASE_STATE);
	HAL_GPIO_WritePin(BUTTON_3_GPIO_Port, BUTTON_3_Pin, RELEASE_STATE);
}

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000058 	.word	0x20000058

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	@ (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000058 	.word	0x20000058

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e084      	b.n	80002b6 <getKeyInput+0x116>
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 80001ac:	4a46      	ldr	r2, [pc, #280]	@ (80002c8 <getKeyInput+0x128>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4945      	ldr	r1, [pc, #276]	@ (80002cc <getKeyInput+0x12c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounceButtonBuffer2[i] = buttonBuffer[i];
 80001bc:	4a44      	ldr	r2, [pc, #272]	@ (80002d0 <getKeyInput+0x130>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4940      	ldr	r1, [pc, #256]	@ (80002c8 <getKeyInput+0x128>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Read signal from user
		if (i == 0) {
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10a      	bne.n	80001e8 <getKeyInput+0x48>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,
 80001d2:	2101      	movs	r1, #1
 80001d4:	483f      	ldr	r0, [pc, #252]	@ (80002d4 <getKeyInput+0x134>)
 80001d6:	f001 ff49 	bl	800206c <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a3c      	ldr	r2, [pc, #240]	@ (80002d0 <getKeyInput+0x130>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e01a      	b.n	800021e <getKeyInput+0x7e>
			BUTTON_1_Pin);
		} else if (i == 1) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x64>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port,
 80001ee:	2102      	movs	r1, #2
 80001f0:	4838      	ldr	r0, [pc, #224]	@ (80002d4 <getKeyInput+0x134>)
 80001f2:	f001 ff3b 	bl	800206c <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a35      	ldr	r2, [pc, #212]	@ (80002d0 <getKeyInput+0x130>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000202:	e00c      	b.n	800021e <getKeyInput+0x7e>
			BUTTON_2_Pin);
		} else if (i == 2) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b02      	cmp	r3, #2
 8000208:	d109      	bne.n	800021e <getKeyInput+0x7e>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port,
 800020a:	2104      	movs	r1, #4
 800020c:	4831      	ldr	r0, [pc, #196]	@ (80002d4 <getKeyInput+0x134>)
 800020e:	f001 ff2d 	bl	800206c <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	4619      	mov	r1, r3
 8000216:	4a2e      	ldr	r2, [pc, #184]	@ (80002d0 <getKeyInput+0x130>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			BUTTON_3_Pin);
		}
		//debouncing step
		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 800021e:	4a2b      	ldr	r2, [pc, #172]	@ (80002cc <getKeyInput+0x12c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000226:	4928      	ldr	r1, [pc, #160]	@ (80002c8 <getKeyInput+0x128>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d13e      	bne.n	80002b0 <getKeyInput+0x110>
				&& (debounceButtonBuffer2[i] == buttonBuffer[i])) {
 8000232:	4a25      	ldr	r2, [pc, #148]	@ (80002c8 <getKeyInput+0x128>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023a:	4925      	ldr	r1, [pc, #148]	@ (80002d0 <getKeyInput+0x130>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000242:	429a      	cmp	r2, r3
 8000244:	d134      	bne.n	80002b0 <getKeyInput+0x110>
			if (buttonBuffer[i] != longPressButtonBuffer[i]) {
 8000246:	4a22      	ldr	r2, [pc, #136]	@ (80002d0 <getKeyInput+0x130>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024e:	4922      	ldr	r1, [pc, #136]	@ (80002d8 <getKeyInput+0x138>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000256:	429a      	cmp	r2, r3
 8000258:	d016      	beq.n	8000288 <getKeyInput+0xe8>
				longPressButtonBuffer[i] = buttonBuffer[i];
 800025a:	4a1d      	ldr	r2, [pc, #116]	@ (80002d0 <getKeyInput+0x130>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	491d      	ldr	r1, [pc, #116]	@ (80002d8 <getKeyInput+0x138>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//when pressed, do subKeyProcess()
				if (buttonBuffer[i] == PRESSED_STATE) {
 800026a:	4a19      	ldr	r2, [pc, #100]	@ (80002d0 <getKeyInput+0x130>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d11c      	bne.n	80002b0 <getKeyInput+0x110>
					TimeOutForKeyPress[i] = TIME_OUT_FOR_KEY_PRESS;
 8000276:	4a19      	ldr	r2, [pc, #100]	@ (80002dc <getKeyInput+0x13c>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	21c8      	movs	r1, #200	@ 0xc8
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f7ff ff7d 	bl	8000180 <subKeyProcess>
 8000286:	e013      	b.n	80002b0 <getKeyInput+0x110>
				}
			}

			else {
				TimeOutForKeyPress[i]--;
 8000288:	4a14      	ldr	r2, [pc, #80]	@ (80002dc <getKeyInput+0x13c>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	1e5a      	subs	r2, r3, #1
 8000292:	4912      	ldr	r1, [pc, #72]	@ (80002dc <getKeyInput+0x13c>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 800029a:	4a10      	ldr	r2, [pc, #64]	@ (80002dc <getKeyInput+0x13c>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d104      	bne.n	80002b0 <getKeyInput+0x110>
					longPressButtonBuffer[i] = RELEASE_STATE;
 80002a6:	4a0c      	ldr	r2, [pc, #48]	@ (80002d8 <getKeyInput+0x138>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2101      	movs	r1, #1
 80002ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3301      	adds	r3, #1
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b02      	cmp	r3, #2
 80002ba:	f77f af77 	ble.w	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000018 	.word	0x20000018
 80002cc:	2000000c 	.word	0x2000000c
 80002d0:	20000000 	.word	0x20000000
 80002d4:	40010c00 	.word	0x40010c00
 80002d8:	20000024 	.word	0x20000024
 80002dc:	20000064 	.word	0x20000064

080002e0 <initValues>:
int redTime;

int segModeTime;
int segValueTime;

void initValues() {
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	yellowTime = YELLOW_TIME;
 80002e4:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <initValues+0x3c>)
 80002e6:	2202      	movs	r2, #2
 80002e8:	601a      	str	r2, [r3, #0]
	greenTime = GREEN_TIME;
 80002ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000320 <initValues+0x40>)
 80002ec:	2203      	movs	r2, #3
 80002ee:	601a      	str	r2, [r3, #0]
	redTime = RED_TIME;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <initValues+0x44>)
 80002f2:	2205      	movs	r2, #5
 80002f4:	601a      	str	r2, [r3, #0]
	segModeTime = redTime;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <initValues+0x44>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000328 <initValues+0x48>)
 80002fc:	6013      	str	r3, [r2, #0]
	segValueTime = greenTime;
 80002fe:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <initValues+0x40>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <initValues+0x4c>)
 8000304:	6013      	str	r3, [r2, #0]
	mode = INIT;
 8000306:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <initValues+0x50>)
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
	nmode = init;
 800030c:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <initValues+0x54>)
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000078 	.word	0x20000078
 8000320:	2000007c 	.word	0x2000007c
 8000324:	20000080 	.word	0x20000080
 8000328:	20000084 	.word	0x20000084
 800032c:	20000088 	.word	0x20000088
 8000330:	20000070 	.word	0x20000070
 8000334:	20000074 	.word	0x20000074

08000338 <display7SEG_Mode>:
 *      Author: thinkie
 */

#include "led_display.h"

void display7SEG_Mode(int counter) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
    switch (counter) {
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b09      	cmp	r3, #9
 8000344:	f200 81c8 	bhi.w	80006d8 <display7SEG_Mode+0x3a0>
 8000348:	a201      	add	r2, pc, #4	@ (adr r2, 8000350 <display7SEG_Mode+0x18>)
 800034a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034e:	bf00      	nop
 8000350:	08000379 	.word	0x08000379
 8000354:	080003cf 	.word	0x080003cf
 8000358:	08000425 	.word	0x08000425
 800035c:	0800047b 	.word	0x0800047b
 8000360:	080004d1 	.word	0x080004d1
 8000364:	08000527 	.word	0x08000527
 8000368:	0800057d 	.word	0x0800057d
 800036c:	080005d3 	.word	0x080005d3
 8000370:	08000629 	.word	0x08000629
 8000374:	0800067f 	.word	0x0800067f
        case 0:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800037e:	48d5      	ldr	r0, [pc, #852]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000380:	f001 fe8b 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800038a:	48d2      	ldr	r0, [pc, #840]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800038c:	f001 fe85 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000396:	48cf      	ldr	r0, [pc, #828]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000398:	f001 fe7f 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003a2:	48cc      	ldr	r0, [pc, #816]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003a4:	f001 fe79 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003ae:	48c9      	ldr	r0, [pc, #804]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003b0:	f001 fe73 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003ba:	48c6      	ldr	r0, [pc, #792]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003bc:	f001 fe6d 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003c6:	48c3      	ldr	r0, [pc, #780]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003c8:	f001 fe67 	bl	800209a <HAL_GPIO_WritePin>
            break;
 80003cc:	e185      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 1:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003d4:	48bf      	ldr	r0, [pc, #764]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003d6:	f001 fe60 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003e0:	48bc      	ldr	r0, [pc, #752]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003e2:	f001 fe5a 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003ec:	48b9      	ldr	r0, [pc, #740]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003ee:	f001 fe54 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003f8:	48b6      	ldr	r0, [pc, #728]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003fa:	f001 fe4e 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000404:	48b3      	ldr	r0, [pc, #716]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000406:	f001 fe48 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, SET);
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000410:	48b0      	ldr	r0, [pc, #704]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000412:	f001 fe42 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, SET);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800041c:	48ad      	ldr	r0, [pc, #692]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800041e:	f001 fe3c 	bl	800209a <HAL_GPIO_WritePin>
            break;
 8000422:	e15a      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 2:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800042a:	48aa      	ldr	r0, [pc, #680]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800042c:	f001 fe35 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000436:	48a7      	ldr	r0, [pc, #668]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000438:	f001 fe2f 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000442:	48a4      	ldr	r0, [pc, #656]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000444:	f001 fe29 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800044e:	48a1      	ldr	r0, [pc, #644]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000450:	f001 fe23 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800045a:	489e      	ldr	r0, [pc, #632]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800045c:	f001 fe1d 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, SET);
 8000460:	2201      	movs	r2, #1
 8000462:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000466:	489b      	ldr	r0, [pc, #620]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000468:	f001 fe17 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000472:	4898      	ldr	r0, [pc, #608]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000474:	f001 fe11 	bl	800209a <HAL_GPIO_WritePin>
            break;
 8000478:	e12f      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 3:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000480:	4894      	ldr	r0, [pc, #592]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000482:	f001 fe0a 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800048c:	4891      	ldr	r0, [pc, #580]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800048e:	f001 fe04 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000498:	488e      	ldr	r0, [pc, #568]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800049a:	f001 fdfe 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004a4:	488b      	ldr	r0, [pc, #556]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004a6:	f001 fdf8 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004b0:	4888      	ldr	r0, [pc, #544]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004b2:	f001 fdf2 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, SET);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004bc:	4885      	ldr	r0, [pc, #532]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004be:	f001 fdec 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004c8:	4882      	ldr	r0, [pc, #520]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004ca:	f001 fde6 	bl	800209a <HAL_GPIO_WritePin>
            break;
 80004ce:	e104      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 4:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004d6:	487f      	ldr	r0, [pc, #508]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004d8:	f001 fddf 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004e2:	487c      	ldr	r0, [pc, #496]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004e4:	f001 fdd9 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004ee:	4879      	ldr	r0, [pc, #484]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004f0:	f001 fdd3 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004fa:	4876      	ldr	r0, [pc, #472]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004fc:	f001 fdcd 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000506:	4873      	ldr	r0, [pc, #460]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000508:	f001 fdc7 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000512:	4870      	ldr	r0, [pc, #448]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000514:	f001 fdc1 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800051e:	486d      	ldr	r0, [pc, #436]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000520:	f001 fdbb 	bl	800209a <HAL_GPIO_WritePin>
            break;
 8000524:	e0d9      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 5:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800052c:	4869      	ldr	r0, [pc, #420]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800052e:	f001 fdb4 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, SET);
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000538:	4866      	ldr	r0, [pc, #408]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800053a:	f001 fdae 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000544:	4863      	ldr	r0, [pc, #396]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000546:	f001 fda8 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000550:	4860      	ldr	r0, [pc, #384]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000552:	f001 fda2 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055c:	485d      	ldr	r0, [pc, #372]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800055e:	f001 fd9c 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000568:	485a      	ldr	r0, [pc, #360]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800056a:	f001 fd96 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000574:	4857      	ldr	r0, [pc, #348]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000576:	f001 fd90 	bl	800209a <HAL_GPIO_WritePin>
            break;
 800057a:	e0ae      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 6:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000582:	4854      	ldr	r0, [pc, #336]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000584:	f001 fd89 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800058e:	4851      	ldr	r0, [pc, #324]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000590:	f001 fd83 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800059a:	484e      	ldr	r0, [pc, #312]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800059c:	f001 fd7d 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005a6:	484b      	ldr	r0, [pc, #300]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005a8:	f001 fd77 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b2:	4848      	ldr	r0, [pc, #288]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005b4:	f001 fd71 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005be:	4845      	ldr	r0, [pc, #276]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005c0:	f001 fd6b 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005ca:	4842      	ldr	r0, [pc, #264]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005cc:	f001 fd65 	bl	800209a <HAL_GPIO_WritePin>
            break;
 80005d0:	e083      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 7:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005d8:	483e      	ldr	r0, [pc, #248]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005da:	f001 fd5e 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005e4:	483b      	ldr	r0, [pc, #236]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005e6:	f001 fd58 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005f0:	4838      	ldr	r0, [pc, #224]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005f2:	f001 fd52 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005fc:	4835      	ldr	r0, [pc, #212]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005fe:	f001 fd4c 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000608:	4832      	ldr	r0, [pc, #200]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800060a:	f001 fd46 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000614:	482f      	ldr	r0, [pc, #188]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000616:	f001 fd40 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000620:	482c      	ldr	r0, [pc, #176]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000622:	f001 fd3a 	bl	800209a <HAL_GPIO_WritePin>
            break;
 8000626:	e058      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 8:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800062e:	4829      	ldr	r0, [pc, #164]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000630:	f001 fd33 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800063a:	4826      	ldr	r0, [pc, #152]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800063c:	f001 fd2d 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000646:	4823      	ldr	r0, [pc, #140]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000648:	f001 fd27 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000652:	4820      	ldr	r0, [pc, #128]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000654:	f001 fd21 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065e:	481d      	ldr	r0, [pc, #116]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000660:	f001 fd1b 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066a:	481a      	ldr	r0, [pc, #104]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800066c:	f001 fd15 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000676:	4817      	ldr	r0, [pc, #92]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000678:	f001 fd0f 	bl	800209a <HAL_GPIO_WritePin>
            break;
 800067c:	e02d      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 9:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000684:	4813      	ldr	r0, [pc, #76]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000686:	f001 fd08 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000690:	4810      	ldr	r0, [pc, #64]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000692:	f001 fd02 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800069c:	480d      	ldr	r0, [pc, #52]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800069e:	f001 fcfc 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a8:	480a      	ldr	r0, [pc, #40]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80006aa:	f001 fcf6 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80006b6:	f001 fcf0 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80006c2:	f001 fcea 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006cc:	4801      	ldr	r0, [pc, #4]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80006ce:	f001 fce4 	bl	800209a <HAL_GPIO_WritePin>
            break;
 80006d2:	e002      	b.n	80006da <display7SEG_Mode+0x3a2>
 80006d4:	40010800 	.word	0x40010800
        default:
            break;
 80006d8:	bf00      	nop
    }
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop

080006e4 <display7SEG_Value>:
void display7SEG_Value(int counter) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    switch (counter) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b09      	cmp	r3, #9
 80006f0:	f200 8194 	bhi.w	8000a1c <display7SEG_Value+0x338>
 80006f4:	a201      	add	r2, pc, #4	@ (adr r2, 80006fc <display7SEG_Value+0x18>)
 80006f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fa:	bf00      	nop
 80006fc:	08000725 	.word	0x08000725
 8000700:	08000771 	.word	0x08000771
 8000704:	080007bd 	.word	0x080007bd
 8000708:	08000809 	.word	0x08000809
 800070c:	08000855 	.word	0x08000855
 8000710:	080008a1 	.word	0x080008a1
 8000714:	080008ed 	.word	0x080008ed
 8000718:	08000939 	.word	0x08000939
 800071c:	08000985 	.word	0x08000985
 8000720:	080009d1 	.word	0x080009d1
        case 0:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2108      	movs	r1, #8
 8000728:	48bf      	ldr	r0, [pc, #764]	@ (8000a28 <display7SEG_Value+0x344>)
 800072a:	f001 fcb6 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2110      	movs	r1, #16
 8000732:	48bd      	ldr	r0, [pc, #756]	@ (8000a28 <display7SEG_Value+0x344>)
 8000734:	f001 fcb1 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2120      	movs	r1, #32
 800073c:	48ba      	ldr	r0, [pc, #744]	@ (8000a28 <display7SEG_Value+0x344>)
 800073e:	f001 fcac 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2140      	movs	r1, #64	@ 0x40
 8000746:	48b8      	ldr	r0, [pc, #736]	@ (8000a28 <display7SEG_Value+0x344>)
 8000748:	f001 fca7 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2180      	movs	r1, #128	@ 0x80
 8000750:	48b5      	ldr	r0, [pc, #724]	@ (8000a28 <display7SEG_Value+0x344>)
 8000752:	f001 fca2 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800075c:	48b2      	ldr	r0, [pc, #712]	@ (8000a28 <display7SEG_Value+0x344>)
 800075e:	f001 fc9c 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000768:	48af      	ldr	r0, [pc, #700]	@ (8000a28 <display7SEG_Value+0x344>)
 800076a:	f001 fc96 	bl	800209a <HAL_GPIO_WritePin>
            break;
 800076e:	e156      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 1:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2108      	movs	r1, #8
 8000774:	48ac      	ldr	r0, [pc, #688]	@ (8000a28 <display7SEG_Value+0x344>)
 8000776:	f001 fc90 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2110      	movs	r1, #16
 800077e:	48aa      	ldr	r0, [pc, #680]	@ (8000a28 <display7SEG_Value+0x344>)
 8000780:	f001 fc8b 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2120      	movs	r1, #32
 8000788:	48a7      	ldr	r0, [pc, #668]	@ (8000a28 <display7SEG_Value+0x344>)
 800078a:	f001 fc86 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2140      	movs	r1, #64	@ 0x40
 8000792:	48a5      	ldr	r0, [pc, #660]	@ (8000a28 <display7SEG_Value+0x344>)
 8000794:	f001 fc81 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2180      	movs	r1, #128	@ 0x80
 800079c:	48a2      	ldr	r0, [pc, #648]	@ (8000a28 <display7SEG_Value+0x344>)
 800079e:	f001 fc7c 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007a8:	489f      	ldr	r0, [pc, #636]	@ (8000a28 <display7SEG_Value+0x344>)
 80007aa:	f001 fc76 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007b4:	489c      	ldr	r0, [pc, #624]	@ (8000a28 <display7SEG_Value+0x344>)
 80007b6:	f001 fc70 	bl	800209a <HAL_GPIO_WritePin>
            break;
 80007ba:	e130      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 2:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2108      	movs	r1, #8
 80007c0:	4899      	ldr	r0, [pc, #612]	@ (8000a28 <display7SEG_Value+0x344>)
 80007c2:	f001 fc6a 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	4897      	ldr	r0, [pc, #604]	@ (8000a28 <display7SEG_Value+0x344>)
 80007cc:	f001 fc65 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2120      	movs	r1, #32
 80007d4:	4894      	ldr	r0, [pc, #592]	@ (8000a28 <display7SEG_Value+0x344>)
 80007d6:	f001 fc60 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2140      	movs	r1, #64	@ 0x40
 80007de:	4892      	ldr	r0, [pc, #584]	@ (8000a28 <display7SEG_Value+0x344>)
 80007e0:	f001 fc5b 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2180      	movs	r1, #128	@ 0x80
 80007e8:	488f      	ldr	r0, [pc, #572]	@ (8000a28 <display7SEG_Value+0x344>)
 80007ea:	f001 fc56 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f4:	488c      	ldr	r0, [pc, #560]	@ (8000a28 <display7SEG_Value+0x344>)
 80007f6:	f001 fc50 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000800:	4889      	ldr	r0, [pc, #548]	@ (8000a28 <display7SEG_Value+0x344>)
 8000802:	f001 fc4a 	bl	800209a <HAL_GPIO_WritePin>
            break;
 8000806:	e10a      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 3:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2108      	movs	r1, #8
 800080c:	4886      	ldr	r0, [pc, #536]	@ (8000a28 <display7SEG_Value+0x344>)
 800080e:	f001 fc44 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2110      	movs	r1, #16
 8000816:	4884      	ldr	r0, [pc, #528]	@ (8000a28 <display7SEG_Value+0x344>)
 8000818:	f001 fc3f 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2120      	movs	r1, #32
 8000820:	4881      	ldr	r0, [pc, #516]	@ (8000a28 <display7SEG_Value+0x344>)
 8000822:	f001 fc3a 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	@ 0x40
 800082a:	487f      	ldr	r0, [pc, #508]	@ (8000a28 <display7SEG_Value+0x344>)
 800082c:	f001 fc35 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2180      	movs	r1, #128	@ 0x80
 8000834:	487c      	ldr	r0, [pc, #496]	@ (8000a28 <display7SEG_Value+0x344>)
 8000836:	f001 fc30 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, SET);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000840:	4879      	ldr	r0, [pc, #484]	@ (8000a28 <display7SEG_Value+0x344>)
 8000842:	f001 fc2a 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800084c:	4876      	ldr	r0, [pc, #472]	@ (8000a28 <display7SEG_Value+0x344>)
 800084e:	f001 fc24 	bl	800209a <HAL_GPIO_WritePin>
            break;
 8000852:	e0e4      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 4:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2108      	movs	r1, #8
 8000858:	4873      	ldr	r0, [pc, #460]	@ (8000a28 <display7SEG_Value+0x344>)
 800085a:	f001 fc1e 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2110      	movs	r1, #16
 8000862:	4871      	ldr	r0, [pc, #452]	@ (8000a28 <display7SEG_Value+0x344>)
 8000864:	f001 fc19 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2120      	movs	r1, #32
 800086c:	486e      	ldr	r0, [pc, #440]	@ (8000a28 <display7SEG_Value+0x344>)
 800086e:	f001 fc14 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2140      	movs	r1, #64	@ 0x40
 8000876:	486c      	ldr	r0, [pc, #432]	@ (8000a28 <display7SEG_Value+0x344>)
 8000878:	f001 fc0f 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2180      	movs	r1, #128	@ 0x80
 8000880:	4869      	ldr	r0, [pc, #420]	@ (8000a28 <display7SEG_Value+0x344>)
 8000882:	f001 fc0a 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800088c:	4866      	ldr	r0, [pc, #408]	@ (8000a28 <display7SEG_Value+0x344>)
 800088e:	f001 fc04 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000898:	4863      	ldr	r0, [pc, #396]	@ (8000a28 <display7SEG_Value+0x344>)
 800089a:	f001 fbfe 	bl	800209a <HAL_GPIO_WritePin>
            break;
 800089e:	e0be      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 5:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2108      	movs	r1, #8
 80008a4:	4860      	ldr	r0, [pc, #384]	@ (8000a28 <display7SEG_Value+0x344>)
 80008a6:	f001 fbf8 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2110      	movs	r1, #16
 80008ae:	485e      	ldr	r0, [pc, #376]	@ (8000a28 <display7SEG_Value+0x344>)
 80008b0:	f001 fbf3 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2120      	movs	r1, #32
 80008b8:	485b      	ldr	r0, [pc, #364]	@ (8000a28 <display7SEG_Value+0x344>)
 80008ba:	f001 fbee 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2140      	movs	r1, #64	@ 0x40
 80008c2:	4859      	ldr	r0, [pc, #356]	@ (8000a28 <display7SEG_Value+0x344>)
 80008c4:	f001 fbe9 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2180      	movs	r1, #128	@ 0x80
 80008cc:	4856      	ldr	r0, [pc, #344]	@ (8000a28 <display7SEG_Value+0x344>)
 80008ce:	f001 fbe4 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d8:	4853      	ldr	r0, [pc, #332]	@ (8000a28 <display7SEG_Value+0x344>)
 80008da:	f001 fbde 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008e4:	4850      	ldr	r0, [pc, #320]	@ (8000a28 <display7SEG_Value+0x344>)
 80008e6:	f001 fbd8 	bl	800209a <HAL_GPIO_WritePin>
            break;
 80008ea:	e098      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 6:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2108      	movs	r1, #8
 80008f0:	484d      	ldr	r0, [pc, #308]	@ (8000a28 <display7SEG_Value+0x344>)
 80008f2:	f001 fbd2 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2110      	movs	r1, #16
 80008fa:	484b      	ldr	r0, [pc, #300]	@ (8000a28 <display7SEG_Value+0x344>)
 80008fc:	f001 fbcd 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2120      	movs	r1, #32
 8000904:	4848      	ldr	r0, [pc, #288]	@ (8000a28 <display7SEG_Value+0x344>)
 8000906:	f001 fbc8 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2140      	movs	r1, #64	@ 0x40
 800090e:	4846      	ldr	r0, [pc, #280]	@ (8000a28 <display7SEG_Value+0x344>)
 8000910:	f001 fbc3 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2180      	movs	r1, #128	@ 0x80
 8000918:	4843      	ldr	r0, [pc, #268]	@ (8000a28 <display7SEG_Value+0x344>)
 800091a:	f001 fbbe 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000924:	4840      	ldr	r0, [pc, #256]	@ (8000a28 <display7SEG_Value+0x344>)
 8000926:	f001 fbb8 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000930:	483d      	ldr	r0, [pc, #244]	@ (8000a28 <display7SEG_Value+0x344>)
 8000932:	f001 fbb2 	bl	800209a <HAL_GPIO_WritePin>
            break;
 8000936:	e072      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 7:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2108      	movs	r1, #8
 800093c:	483a      	ldr	r0, [pc, #232]	@ (8000a28 <display7SEG_Value+0x344>)
 800093e:	f001 fbac 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2110      	movs	r1, #16
 8000946:	4838      	ldr	r0, [pc, #224]	@ (8000a28 <display7SEG_Value+0x344>)
 8000948:	f001 fba7 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2120      	movs	r1, #32
 8000950:	4835      	ldr	r0, [pc, #212]	@ (8000a28 <display7SEG_Value+0x344>)
 8000952:	f001 fba2 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, SET);
 8000956:	2201      	movs	r2, #1
 8000958:	2140      	movs	r1, #64	@ 0x40
 800095a:	4833      	ldr	r0, [pc, #204]	@ (8000a28 <display7SEG_Value+0x344>)
 800095c:	f001 fb9d 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2180      	movs	r1, #128	@ 0x80
 8000964:	4830      	ldr	r0, [pc, #192]	@ (8000a28 <display7SEG_Value+0x344>)
 8000966:	f001 fb98 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000970:	482d      	ldr	r0, [pc, #180]	@ (8000a28 <display7SEG_Value+0x344>)
 8000972:	f001 fb92 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800097c:	482a      	ldr	r0, [pc, #168]	@ (8000a28 <display7SEG_Value+0x344>)
 800097e:	f001 fb8c 	bl	800209a <HAL_GPIO_WritePin>
            break;
 8000982:	e04c      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 8:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2108      	movs	r1, #8
 8000988:	4827      	ldr	r0, [pc, #156]	@ (8000a28 <display7SEG_Value+0x344>)
 800098a:	f001 fb86 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2110      	movs	r1, #16
 8000992:	4825      	ldr	r0, [pc, #148]	@ (8000a28 <display7SEG_Value+0x344>)
 8000994:	f001 fb81 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2120      	movs	r1, #32
 800099c:	4822      	ldr	r0, [pc, #136]	@ (8000a28 <display7SEG_Value+0x344>)
 800099e:	f001 fb7c 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2140      	movs	r1, #64	@ 0x40
 80009a6:	4820      	ldr	r0, [pc, #128]	@ (8000a28 <display7SEG_Value+0x344>)
 80009a8:	f001 fb77 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2180      	movs	r1, #128	@ 0x80
 80009b0:	481d      	ldr	r0, [pc, #116]	@ (8000a28 <display7SEG_Value+0x344>)
 80009b2:	f001 fb72 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009bc:	481a      	ldr	r0, [pc, #104]	@ (8000a28 <display7SEG_Value+0x344>)
 80009be:	f001 fb6c 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c8:	4817      	ldr	r0, [pc, #92]	@ (8000a28 <display7SEG_Value+0x344>)
 80009ca:	f001 fb66 	bl	800209a <HAL_GPIO_WritePin>
            break;
 80009ce:	e026      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 9:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2108      	movs	r1, #8
 80009d4:	4814      	ldr	r0, [pc, #80]	@ (8000a28 <display7SEG_Value+0x344>)
 80009d6:	f001 fb60 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2110      	movs	r1, #16
 80009de:	4812      	ldr	r0, [pc, #72]	@ (8000a28 <display7SEG_Value+0x344>)
 80009e0:	f001 fb5b 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2120      	movs	r1, #32
 80009e8:	480f      	ldr	r0, [pc, #60]	@ (8000a28 <display7SEG_Value+0x344>)
 80009ea:	f001 fb56 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	@ 0x40
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <display7SEG_Value+0x344>)
 80009f4:	f001 fb51 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2180      	movs	r1, #128	@ 0x80
 80009fc:	480a      	ldr	r0, [pc, #40]	@ (8000a28 <display7SEG_Value+0x344>)
 80009fe:	f001 fb4c 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a08:	4807      	ldr	r0, [pc, #28]	@ (8000a28 <display7SEG_Value+0x344>)
 8000a0a:	f001 fb46 	bl	800209a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <display7SEG_Value+0x344>)
 8000a16:	f001 fb40 	bl	800209a <HAL_GPIO_WritePin>
            break;
 8000a1a:	e000      	b.n	8000a1e <display7SEG_Value+0x33a>
        default:
            break;
 8000a1c:	bf00      	nop
    }
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40010c00 	.word	0x40010c00

08000a2c <update7SEG_Mode>:

void update7SEG_Mode(int index, int data) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	switch (index) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d003      	beq.n	8000a44 <update7SEG_Mode+0x18>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d017      	beq.n	8000a72 <update7SEG_Mode+0x46>
		HAL_GPIO_WritePin(EN_MODE_0_GPIO_Port, EN_MODE_0_Pin, SET);
		HAL_GPIO_WritePin(EN_MODE_1_GPIO_Port, EN_MODE_1_Pin, RESET);
		display7SEG_Mode(data % 10);
		break;
	default:
		break;
 8000a42:	e032      	b.n	8000aaa <update7SEG_Mode+0x7e>
		HAL_GPIO_WritePin(EN_MODE_0_GPIO_Port, EN_MODE_0_Pin, RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4a:	481a      	ldr	r0, [pc, #104]	@ (8000ab4 <update7SEG_Mode+0x88>)
 8000a4c:	f001 fb25 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_MODE_1_GPIO_Port, EN_MODE_1_Pin, SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a56:	4817      	ldr	r0, [pc, #92]	@ (8000ab4 <update7SEG_Mode+0x88>)
 8000a58:	f001 fb1f 	bl	800209a <HAL_GPIO_WritePin>
		display7SEG_Mode(data / 10);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	4a16      	ldr	r2, [pc, #88]	@ (8000ab8 <update7SEG_Mode+0x8c>)
 8000a60:	fb82 1203 	smull	r1, r2, r2, r3
 8000a64:	1092      	asrs	r2, r2, #2
 8000a66:	17db      	asrs	r3, r3, #31
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fc64 	bl	8000338 <display7SEG_Mode>
		break;
 8000a70:	e01b      	b.n	8000aaa <update7SEG_Mode+0x7e>
		HAL_GPIO_WritePin(EN_MODE_0_GPIO_Port, EN_MODE_0_Pin, SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a78:	480e      	ldr	r0, [pc, #56]	@ (8000ab4 <update7SEG_Mode+0x88>)
 8000a7a:	f001 fb0e 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_MODE_1_GPIO_Port, EN_MODE_1_Pin, RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a84:	480b      	ldr	r0, [pc, #44]	@ (8000ab4 <update7SEG_Mode+0x88>)
 8000a86:	f001 fb08 	bl	800209a <HAL_GPIO_WritePin>
		display7SEG_Mode(data % 10);
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <update7SEG_Mode+0x8c>)
 8000a8e:	fb83 1302 	smull	r1, r3, r3, r2
 8000a92:	1099      	asrs	r1, r3, #2
 8000a94:	17d3      	asrs	r3, r2, #31
 8000a96:	1ac9      	subs	r1, r1, r3
 8000a98:	460b      	mov	r3, r1
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	1ad1      	subs	r1, r2, r3
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	f7ff fc48 	bl	8000338 <display7SEG_Mode>
		break;
 8000aa8:	bf00      	nop
	}
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40010c00 	.word	0x40010c00
 8000ab8:	66666667 	.word	0x66666667

08000abc <update7SEG_Value>:

void update7SEG_Value(int index, int data) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	switch (index) {
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d003      	beq.n	8000ad4 <update7SEG_Value+0x18>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d017      	beq.n	8000b02 <update7SEG_Value+0x46>
		HAL_GPIO_WritePin(EN_VAL_0_GPIO_Port, EN_VAL_0_Pin, SET);
		HAL_GPIO_WritePin(EN_VAL_1_GPIO_Port, EN_VAL_1_Pin, RESET);
		display7SEG_Value(data % 10);
		break;
	default:
		break;
 8000ad2:	e032      	b.n	8000b3a <update7SEG_Value+0x7e>
		HAL_GPIO_WritePin(EN_VAL_0_GPIO_Port, EN_VAL_0_Pin, RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ada:	481a      	ldr	r0, [pc, #104]	@ (8000b44 <update7SEG_Value+0x88>)
 8000adc:	f001 fadd 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_VAL_1_GPIO_Port, EN_VAL_1_Pin, SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ae6:	4817      	ldr	r0, [pc, #92]	@ (8000b44 <update7SEG_Value+0x88>)
 8000ae8:	f001 fad7 	bl	800209a <HAL_GPIO_WritePin>
		display7SEG_Value(data / 10);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	4a16      	ldr	r2, [pc, #88]	@ (8000b48 <update7SEG_Value+0x8c>)
 8000af0:	fb82 1203 	smull	r1, r2, r2, r3
 8000af4:	1092      	asrs	r2, r2, #2
 8000af6:	17db      	asrs	r3, r3, #31
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fdf2 	bl	80006e4 <display7SEG_Value>
		break;
 8000b00:	e01b      	b.n	8000b3a <update7SEG_Value+0x7e>
		HAL_GPIO_WritePin(EN_VAL_0_GPIO_Port, EN_VAL_0_Pin, SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b08:	480e      	ldr	r0, [pc, #56]	@ (8000b44 <update7SEG_Value+0x88>)
 8000b0a:	f001 fac6 	bl	800209a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_VAL_1_GPIO_Port, EN_VAL_1_Pin, RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b14:	480b      	ldr	r0, [pc, #44]	@ (8000b44 <update7SEG_Value+0x88>)
 8000b16:	f001 fac0 	bl	800209a <HAL_GPIO_WritePin>
		display7SEG_Value(data % 10);
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <update7SEG_Value+0x8c>)
 8000b1e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b22:	1099      	asrs	r1, r3, #2
 8000b24:	17d3      	asrs	r3, r2, #31
 8000b26:	1ac9      	subs	r1, r1, r3
 8000b28:	460b      	mov	r3, r1
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	1ad1      	subs	r1, r2, r3
 8000b32:	4608      	mov	r0, r1
 8000b34:	f7ff fdd6 	bl	80006e4 <display7SEG_Value>
		break;
 8000b38:	bf00      	nop
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010c00 	.word	0x40010c00
 8000b48:	66666667 	.word	0x66666667

08000b4c <segRun1>:

void segRun1() {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	update7SEG_Mode(MODE_0_7SEG, segModeTime);
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <segRun1+0x20>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff ff68 	bl	8000a2c <update7SEG_Mode>
	update7SEG_Value(VALUE_0_7SEG, segValueTime);
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <segRun1+0x24>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	2002      	movs	r0, #2
 8000b64:	f7ff ffaa 	bl	8000abc <update7SEG_Value>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000084 	.word	0x20000084
 8000b70:	20000088 	.word	0x20000088

08000b74 <segRun2>:

void segRun2() {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	update7SEG_Mode(MODE_1_7SEG, segModeTime);
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <segRun2+0x20>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff ff54 	bl	8000a2c <update7SEG_Mode>
	update7SEG_Value(VALUE_1_7SEG, segValueTime);
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <segRun2+0x24>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	f7ff ff96 	bl	8000abc <update7SEG_Value>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000084 	.word	0x20000084
 8000b98:	20000088 	.word	0x20000088

08000b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba0:	f000 ff78 	bl	8001a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba4:	f000 f826 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba8:	f000 f8ac 	bl	8000d04 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bac:	f000 f85e 	bl	8000c6c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bb0:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <main+0x48>)
 8000bb2:	f001 fed1 	bl	8002958 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initValues();
 8000bb6:	f7ff fb93 	bl	80002e0 <initValues>
  SCH_Init();
 8000bba:	f000 f9c3 	bl	8000f44 <SCH_Init>
  SCH_Add_Task(timeRun, 0, 1);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4809      	ldr	r0, [pc, #36]	@ (8000be8 <main+0x4c>)
 8000bc4:	f000 f9d8 	bl	8000f78 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 1);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4807      	ldr	r0, [pc, #28]	@ (8000bec <main+0x50>)
 8000bce:	f000 f9d3 	bl	8000f78 <SCH_Add_Task>
  SCH_Add_Task(trafficRun, 0, 1);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <main+0x54>)
 8000bd8:	f000 f9ce 	bl	8000f78 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000bdc:	f000 faea 	bl	80011b4 <SCH_Dispatch_Tasks>
 8000be0:	e7fc      	b.n	8000bdc <main+0x40>
 8000be2:	bf00      	nop
 8000be4:	2000008c 	.word	0x2000008c
 8000be8:	080014ed 	.word	0x080014ed
 8000bec:	080001a1 	.word	0x080001a1
 8000bf0:	08001719 	.word	0x08001719

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b090      	sub	sp, #64	@ 0x40
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	2228      	movs	r2, #40	@ 0x28
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 fa34 	bl	8003070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1e:	2310      	movs	r3, #16
 8000c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c26:	f107 0318 	add.w	r3, r7, #24
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 fa66 	bl	80020fc <HAL_RCC_OscConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c36:	f000 f8d1 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 fcd4 	bl	8002600 <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c5e:	f000 f8bd 	bl	8000ddc <Error_Handler>
  }
}
 8000c62:	bf00      	nop
 8000c64:	3740      	adds	r7, #64	@ 0x40
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c80:	463b      	mov	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <MX_TIM2_Init+0x94>)
 8000c8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <MX_TIM2_Init+0x94>)
 8000c92:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000c96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c98:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <MX_TIM2_Init+0x94>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <MX_TIM2_Init+0x94>)
 8000ca0:	2209      	movs	r2, #9
 8000ca2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <MX_TIM2_Init+0x94>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <MX_TIM2_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cb0:	4813      	ldr	r0, [pc, #76]	@ (8000d00 <MX_TIM2_Init+0x94>)
 8000cb2:	f001 fe01 	bl	80028b8 <HAL_TIM_Base_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cbc:	f000 f88e 	bl	8000ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <MX_TIM2_Init+0x94>)
 8000cce:	f001 ff7f 	bl	8002bd0 <HAL_TIM_ConfigClockSource>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cd8:	f000 f880 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <MX_TIM2_Init+0x94>)
 8000cea:	f002 f957 	bl	8002f9c <HAL_TIMEx_MasterConfigSynchronization>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cf4:	f000 f872 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000008c 	.word	0x2000008c

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b28      	ldr	r3, [pc, #160]	@ (8000dbc <MX_GPIO_Init+0xb8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a27      	ldr	r2, [pc, #156]	@ (8000dbc <MX_GPIO_Init+0xb8>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b25      	ldr	r3, [pc, #148]	@ (8000dbc <MX_GPIO_Init+0xb8>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b22      	ldr	r3, [pc, #136]	@ (8000dbc <MX_GPIO_Init+0xb8>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a21      	ldr	r2, [pc, #132]	@ (8000dbc <MX_GPIO_Init+0xb8>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dbc <MX_GPIO_Init+0xb8>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f64f 613f 	movw	r1, #65087	@ 0xfe3f
 8000d4e:	481c      	ldr	r0, [pc, #112]	@ (8000dc0 <MX_GPIO_Init+0xbc>)
 8000d50:	f001 f9a3 	bl	800209a <HAL_GPIO_WritePin>
                          |YELLOW_2_Pin|GREEN_2_Pin|MODE_A_Pin|MODE_B_Pin
                          |MODE_C_Pin|MODE_D_Pin|MODE_E_Pin|MODE_F_Pin
                          |MODE_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_VAL_0_Pin|EN_VAL_1_Pin|EN_MODE_0_Pin|EN_MODE_1_Pin
 8000d54:	2200      	movs	r2, #0
 8000d56:	f24f 31f8 	movw	r1, #62456	@ 0xf3f8
 8000d5a:	481a      	ldr	r0, [pc, #104]	@ (8000dc4 <MX_GPIO_Init+0xc0>)
 8000d5c:	f001 f99d 	bl	800209a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
                           YELLOW_2_Pin GREEN_2_Pin MODE_A_Pin MODE_B_Pin
                           MODE_C_Pin MODE_D_Pin MODE_E_Pin MODE_F_Pin
                           MODE_G_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000d60:	f64f 633f 	movw	r3, #65087	@ 0xfe3f
 8000d64:	60bb      	str	r3, [r7, #8]
                          |YELLOW_2_Pin|GREEN_2_Pin|MODE_A_Pin|MODE_B_Pin
                          |MODE_C_Pin|MODE_D_Pin|MODE_E_Pin|MODE_F_Pin
                          |MODE_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	4619      	mov	r1, r3
 8000d78:	4811      	ldr	r0, [pc, #68]	@ (8000dc0 <MX_GPIO_Init+0xbc>)
 8000d7a:	f000 fffb 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <MX_GPIO_Init+0xc0>)
 8000d92:	f000 ffef 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_VAL_0_Pin EN_VAL_1_Pin EN_MODE_0_Pin EN_MODE_1_Pin
                           VALUE_A_Pin VALUE_B_Pin VALUE_C_Pin VALUE_D_Pin
                           VALUE_E_Pin VALUE_F_Pin VALUE_G_Pin */
  GPIO_InitStruct.Pin = EN_VAL_0_Pin|EN_VAL_1_Pin|EN_MODE_0_Pin|EN_MODE_1_Pin
 8000d96:	f24f 33f8 	movw	r3, #62456	@ 0xf3f8
 8000d9a:	60bb      	str	r3, [r7, #8]
                          |VALUE_A_Pin|VALUE_B_Pin|VALUE_C_Pin|VALUE_D_Pin
                          |VALUE_E_Pin|VALUE_F_Pin|VALUE_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2302      	movs	r3, #2
 8000da6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_GPIO_Init+0xc0>)
 8000db0:	f000 ffe0 	bl	8001d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010800 	.word	0x40010800
 8000dc4:	40010c00 	.word	0x40010c00

08000dc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000dd0:	f000 f9cc 	bl	800116c <SCH_Update>

}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <Error_Handler+0x8>

08000de8 <normalMode>:
 *      Author: thinkie
 */

#include "normal_mode.h"

void normalMode() {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	switch (nmode) {
 8000dec:	4b4e      	ldr	r3, [pc, #312]	@ (8000f28 <normalMode+0x140>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	f200 808e 	bhi.w	8000f12 <normalMode+0x12a>
 8000df6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dfc <normalMode+0x14>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000e11 	.word	0x08000e11
 8000e00:	08000e43 	.word	0x08000e43
 8000e04:	08000e71 	.word	0x08000e71
 8000e08:	08000eab 	.word	0x08000eab
 8000e0c:	08000ed9 	.word	0x08000ed9
	case init: {
		setTimer1(greenTime * 1000);
 8000e10:	4b46      	ldr	r3, [pc, #280]	@ (8000f2c <normalMode+0x144>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e18:	fb02 f303 	mul.w	r3, r2, r3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fb2d 	bl	800147c <setTimer1>
		segModeTime = redTime;
 8000e22:	4b43      	ldr	r3, [pc, #268]	@ (8000f30 <normalMode+0x148>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a43      	ldr	r2, [pc, #268]	@ (8000f34 <normalMode+0x14c>)
 8000e28:	6013      	str	r3, [r2, #0]
		segValueTime = greenTime;
 8000e2a:	4b40      	ldr	r3, [pc, #256]	@ (8000f2c <normalMode+0x144>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a42      	ldr	r2, [pc, #264]	@ (8000f38 <normalMode+0x150>)
 8000e30:	6013      	str	r3, [r2, #0]
		setRed1();
 8000e32:	f000 fbed 	bl	8001610 <setRed1>
		setGreen2();
 8000e36:	f000 fc59 	bl	80016ec <setGreen2>
		nmode = mode1;
 8000e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f28 <normalMode+0x140>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]
		break;
 8000e40:	e070      	b.n	8000f24 <normalMode+0x13c>
	}
	case mode1: {
		if (timer1_flag == 1) {
 8000e42:	4b3e      	ldr	r3, [pc, #248]	@ (8000f3c <normalMode+0x154>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d165      	bne.n	8000f16 <normalMode+0x12e>
			setTimer1(yellowTime * 1000);
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <normalMode+0x158>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 fb10 	bl	800147c <setTimer1>
			setYellow2();
 8000e5c:	f000 fc30 	bl	80016c0 <setYellow2>
			segValueTime = yellowTime;
 8000e60:	4b37      	ldr	r3, [pc, #220]	@ (8000f40 <normalMode+0x158>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a34      	ldr	r2, [pc, #208]	@ (8000f38 <normalMode+0x150>)
 8000e66:	6013      	str	r3, [r2, #0]
			nmode = mode2;
 8000e68:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <normalMode+0x140>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e6e:	e052      	b.n	8000f16 <normalMode+0x12e>
	}
	case mode2: {
		if (timer1_flag == 1) {
 8000e70:	4b32      	ldr	r3, [pc, #200]	@ (8000f3c <normalMode+0x154>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d150      	bne.n	8000f1a <normalMode+0x132>
			setTimer1(greenTime * 1000);
 8000e78:	4b2c      	ldr	r3, [pc, #176]	@ (8000f2c <normalMode+0x144>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e80:	fb02 f303 	mul.w	r3, r2, r3
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 faf9 	bl	800147c <setTimer1>
			setGreen1();
 8000e8a:	f000 fbed 	bl	8001668 <setGreen1>
			setRed2();
 8000e8e:	f000 fc01 	bl	8001694 <setRed2>
			segModeTime = greenTime;
 8000e92:	4b26      	ldr	r3, [pc, #152]	@ (8000f2c <normalMode+0x144>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a27      	ldr	r2, [pc, #156]	@ (8000f34 <normalMode+0x14c>)
 8000e98:	6013      	str	r3, [r2, #0]
			segValueTime = redTime;
 8000e9a:	4b25      	ldr	r3, [pc, #148]	@ (8000f30 <normalMode+0x148>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a26      	ldr	r2, [pc, #152]	@ (8000f38 <normalMode+0x150>)
 8000ea0:	6013      	str	r3, [r2, #0]
			nmode = mode3;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <normalMode+0x140>)
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ea8:	e037      	b.n	8000f1a <normalMode+0x132>
	}
	case mode3: {
		if (timer1_flag == 1) {
 8000eaa:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <normalMode+0x154>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d135      	bne.n	8000f1e <normalMode+0x136>
			setTimer1(yellowTime * 1000);
 8000eb2:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <normalMode+0x158>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000eba:	fb02 f303 	mul.w	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fadc 	bl	800147c <setTimer1>
			setYellow1();
 8000ec4:	f000 fbba 	bl	800163c <setYellow1>
			segModeTime = yellowTime;
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <normalMode+0x158>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	@ (8000f34 <normalMode+0x14c>)
 8000ece:	6013      	str	r3, [r2, #0]
			nmode = mode4;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <normalMode+0x140>)
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ed6:	e022      	b.n	8000f1e <normalMode+0x136>
	}
	case mode4: {
		if (timer1_flag == 1) {
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <normalMode+0x154>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d120      	bne.n	8000f22 <normalMode+0x13a>
			setTimer1(greenTime * 1000);
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <normalMode+0x144>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fac5 	bl	800147c <setTimer1>
			setRed1();
 8000ef2:	f000 fb8d 	bl	8001610 <setRed1>
			setGreen2();
 8000ef6:	f000 fbf9 	bl	80016ec <setGreen2>
			segModeTime = redTime;
 8000efa:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <normalMode+0x148>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <normalMode+0x14c>)
 8000f00:	6013      	str	r3, [r2, #0]
			segValueTime = greenTime;
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <normalMode+0x144>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a0c      	ldr	r2, [pc, #48]	@ (8000f38 <normalMode+0x150>)
 8000f08:	6013      	str	r3, [r2, #0]
			nmode = mode1;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <normalMode+0x140>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f10:	e007      	b.n	8000f22 <normalMode+0x13a>
	}
	default:
		break;
 8000f12:	bf00      	nop
 8000f14:	e006      	b.n	8000f24 <normalMode+0x13c>
		break;
 8000f16:	bf00      	nop
 8000f18:	e004      	b.n	8000f24 <normalMode+0x13c>
		break;
 8000f1a:	bf00      	nop
 8000f1c:	e002      	b.n	8000f24 <normalMode+0x13c>
		break;
 8000f1e:	bf00      	nop
 8000f20:	e000      	b.n	8000f24 <normalMode+0x13c>
		break;
 8000f22:	bf00      	nop
	}
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000074 	.word	0x20000074
 8000f2c:	2000007c 	.word	0x2000007c
 8000f30:	20000080 	.word	0x20000080
 8000f34:	20000084 	.word	0x20000084
 8000f38:	20000088 	.word	0x20000088
 8000f3c:	200003f8 	.word	0x200003f8
 8000f40:	20000078 	.word	0x20000078

08000f44 <SCH_Init>:
#include "scheduler.h"

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
	current_index_task = 0;
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <SCH_Init+0x30>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	e006      	b.n	8000f64 <SCH_Init+0x20>
		// Delete all tasks
		SCH_Delete_Task(i);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f9c7 	bl	80012ec <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	3301      	adds	r3, #1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b27      	cmp	r3, #39	@ 0x27
 8000f68:	d9f5      	bls.n	8000f56 <SCH_Init+0x12>
	}

}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200003f4 	.word	0x200003f4

08000f78 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000f78:	b4b0      	push	{r4, r5, r7}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	77fb      	strb	r3, [r7, #31]
	if (current_index_task == 0) {
 8000f88:	4b76      	ldr	r3, [pc, #472]	@ (8001164 <SCH_Add_Task+0x1ec>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d112      	bne.n	8000fb6 <SCH_Add_Task+0x3e>
		// Add task at the index = 0 if the scheduler is empty
		SCH_tasks_G[0].pTask = pFunction;
 8000f90:	4a75      	ldr	r2, [pc, #468]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6013      	str	r3, [r2, #0]
		SCH_tasks_G[0].Delay = DELAY;
 8000f96:	4a74      	ldr	r2, [pc, #464]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	6053      	str	r3, [r2, #4]
		SCH_tasks_G[0].Period = PERIOD;
 8000f9c:	4a72      	ldr	r2, [pc, #456]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6093      	str	r3, [r2, #8]
		SCH_tasks_G[0].RunMe = 0;
 8000fa2:	4b71      	ldr	r3, [pc, #452]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	731a      	strb	r2, [r3, #12]
		current_index_task++;
 8000fa8:	4b6e      	ldr	r3, [pc, #440]	@ (8001164 <SCH_Add_Task+0x1ec>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b6c      	ldr	r3, [pc, #432]	@ (8001164 <SCH_Add_Task+0x1ec>)
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	e0cf      	b.n	8001156 <SCH_Add_Task+0x1de>
	} else if (current_index_task > 0) {
 8000fb6:	4b6b      	ldr	r3, [pc, #428]	@ (8001164 <SCH_Add_Task+0x1ec>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 80cb 	beq.w	8001156 <SCH_Add_Task+0x1de>
		// Find satisfying locations to add new task
		while ((Index < current_index_task) && current_index_task < SCH_MAX_TASKS) {
 8000fc0:	e089      	b.n	80010d6 <SCH_Add_Task+0x15e>
			if (SCH_tasks_G[Index].Delay > DELAY) {
 8000fc2:	7ffa      	ldrb	r2, [r7, #31]
 8000fc4:	4968      	ldr	r1, [pc, #416]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d26e      	bcs.n	80010b8 <SCH_Add_Task+0x140>
				for (int i = current_index_task; i > Index; i--) {
 8000fda:	4b62      	ldr	r3, [pc, #392]	@ (8001164 <SCH_Add_Task+0x1ec>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	e017      	b.n	8001012 <SCH_Add_Task+0x9a>
					// Shift tasks
					SCH_tasks_G[i] = SCH_tasks_G[i - 1];
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	1e5a      	subs	r2, r3, #1
 8000fe6:	4860      	ldr	r0, [pc, #384]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8000fe8:	69b9      	ldr	r1, [r7, #24]
 8000fea:	460b      	mov	r3, r1
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4418      	add	r0, r3
 8000ff4:	495c      	ldr	r1, [pc, #368]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	440b      	add	r3, r1
 8001000:	4604      	mov	r4, r0
 8001002:	461d      	mov	r5, r3
 8001004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001008:	682b      	ldr	r3, [r5, #0]
 800100a:	6023      	str	r3, [r4, #0]
				for (int i = current_index_task; i > Index; i--) {
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	3b01      	subs	r3, #1
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	7ffb      	ldrb	r3, [r7, #31]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	429a      	cmp	r2, r3
 8001018:	dce3      	bgt.n	8000fe2 <SCH_Add_Task+0x6a>
				}
				SCH_tasks_G[Index].pTask = pFunction;
 800101a:	7ffa      	ldrb	r2, [r7, #31]
 800101c:	4952      	ldr	r1, [pc, #328]	@ (8001168 <SCH_Add_Task+0x1f0>)
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[Index].Delay = DELAY;
 800102c:	7ffa      	ldrb	r2, [r7, #31]
 800102e:	494e      	ldr	r1, [pc, #312]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	3304      	adds	r3, #4
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[Index].Period = PERIOD;
 8001040:	7ffa      	ldrb	r2, [r7, #31]
 8001042:	4949      	ldr	r1, [pc, #292]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	3308      	adds	r3, #8
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[Index].RunMe = 0;
 8001054:	7ffa      	ldrb	r2, [r7, #31]
 8001056:	4944      	ldr	r1, [pc, #272]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	330c      	adds	r3, #12
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
				current_index_task++;
 8001068:	4b3e      	ldr	r3, [pc, #248]	@ (8001164 <SCH_Add_Task+0x1ec>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b3c      	ldr	r3, [pc, #240]	@ (8001164 <SCH_Add_Task+0x1ec>)
 8001072:	701a      	strb	r2, [r3, #0]
				for (int j = Index + 1; j < current_index_task; j++) {
 8001074:	7ffb      	ldrb	r3, [r7, #31]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	e016      	b.n	80010aa <SCH_Add_Task+0x132>
					SCH_tasks_G[j].Delay -= DELAY;
 800107c:	493a      	ldr	r1, [pc, #232]	@ (8001168 <SCH_Add_Task+0x1f0>)
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	3304      	adds	r3, #4
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad1      	subs	r1, r2, r3
 8001092:	4835      	ldr	r0, [pc, #212]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4403      	add	r3, r0
 80010a0:	3304      	adds	r3, #4
 80010a2:	6019      	str	r1, [r3, #0]
				for (int j = Index + 1; j < current_index_task; j++) {
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	3301      	adds	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001164 <SCH_Add_Task+0x1ec>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	4293      	cmp	r3, r2
 80010b4:	dbe2      	blt.n	800107c <SCH_Add_Task+0x104>
				}
				break;
 80010b6:	e018      	b.n	80010ea <SCH_Add_Task+0x172>
			} else {
				DELAY -= SCH_tasks_G[Index].Delay;
 80010b8:	7ffa      	ldrb	r2, [r7, #31]
 80010ba:	492b      	ldr	r1, [pc, #172]	@ (8001168 <SCH_Add_Task+0x1f0>)
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	3304      	adds	r3, #4
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	60bb      	str	r3, [r7, #8]
			}
			Index++;
 80010d0:	7ffb      	ldrb	r3, [r7, #31]
 80010d2:	3301      	adds	r3, #1
 80010d4:	77fb      	strb	r3, [r7, #31]
		while ((Index < current_index_task) && current_index_task < SCH_MAX_TASKS) {
 80010d6:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <SCH_Add_Task+0x1ec>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	7ffa      	ldrb	r2, [r7, #31]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d204      	bcs.n	80010ea <SCH_Add_Task+0x172>
 80010e0:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <SCH_Add_Task+0x1ec>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b27      	cmp	r3, #39	@ 0x27
 80010e6:	f67f af6c 	bls.w	8000fc2 <SCH_Add_Task+0x4a>
		}
		// If we're in the last of scheduler and scheduler is not full
		// => Insert new task here
		if (Index == current_index_task && (current_index_task + 1 < SCH_MAX_TASKS)) {
 80010ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <SCH_Add_Task+0x1ec>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	7ffa      	ldrb	r2, [r7, #31]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d130      	bne.n	8001156 <SCH_Add_Task+0x1de>
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <SCH_Add_Task+0x1ec>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b26      	cmp	r3, #38	@ 0x26
 80010fa:	d82c      	bhi.n	8001156 <SCH_Add_Task+0x1de>
			SCH_tasks_G[Index].pTask = pFunction;
 80010fc:	7ffa      	ldrb	r2, [r7, #31]
 80010fe:	491a      	ldr	r1, [pc, #104]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[Index].Delay = DELAY;
 800110e:	7ffa      	ldrb	r2, [r7, #31]
 8001110:	4915      	ldr	r1, [pc, #84]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8001112:	4613      	mov	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	3304      	adds	r3, #4
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[Index].Period = PERIOD;
 8001122:	7ffa      	ldrb	r2, [r7, #31]
 8001124:	4910      	ldr	r1, [pc, #64]	@ (8001168 <SCH_Add_Task+0x1f0>)
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3308      	adds	r3, #8
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[Index].RunMe = 0;
 8001136:	7ffa      	ldrb	r2, [r7, #31]
 8001138:	490b      	ldr	r1, [pc, #44]	@ (8001168 <SCH_Add_Task+0x1f0>)
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	330c      	adds	r3, #12
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
			current_index_task++;
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <SCH_Add_Task+0x1ec>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <SCH_Add_Task+0x1ec>)
 8001154:	701a      	strb	r2, [r3, #0]
		}
	}
	// Return position of task (to allow later deletion)
	return Index;
 8001156:	7ffb      	ldrb	r3, [r7, #31]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3724      	adds	r7, #36	@ 0x24
 800115c:	46bd      	mov	sp, r7
 800115e:	bcb0      	pop	{r4, r5, r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	200003f4 	.word	0x200003f4
 8001168:	200000d4 	.word	0x200000d4

0800116c <SCH_Update>:
 locations to add the new task and recalculate time delay
 of all task in the scheduler.
 * With this idea, function SCH_Dispatch_Tasks () only need
 check RunMe of the first task in the scheduler.
 */
void SCH_Update(void) {
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	if (SCH_tasks_G[0].pTask) {
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <SCH_Update+0x44>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d017      	beq.n	80011a8 <SCH_Update+0x3c>
		if (SCH_tasks_G[0].Delay == 0) {
 8001178:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <SCH_Update+0x44>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10e      	bne.n	800119e <SCH_Update+0x32>
			// The task is due to run
			// Increase the "RunMe" flag
			SCH_tasks_G[0].RunMe += 1;
 8001180:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <SCH_Update+0x44>)
 8001182:	7b1b      	ldrb	r3, [r3, #12]
 8001184:	3301      	adds	r3, #1
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <SCH_Update+0x44>)
 800118a:	731a      	strb	r2, [r3, #12]
			if (SCH_tasks_G[0].Period) {
 800118c:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <SCH_Update+0x44>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d009      	beq.n	80011a8 <SCH_Update+0x3c>
				// Schedule periodic tasks to run again
				SCH_tasks_G[0].Delay = SCH_tasks_G[0].Period;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <SCH_Update+0x44>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <SCH_Update+0x44>)
 800119a:	6053      	str	r3, [r2, #4]
		} else {
			// Not yet ready to run : just decrement the delay
			SCH_tasks_G[0].Delay -= 1;
		}
	}
}
 800119c:	e004      	b.n	80011a8 <SCH_Update+0x3c>
			SCH_tasks_G[0].Delay -= 1;
 800119e:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <SCH_Update+0x44>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	4a02      	ldr	r2, [pc, #8]	@ (80011b0 <SCH_Update+0x44>)
 80011a6:	6053      	str	r3, [r2, #4]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	200000d4 	.word	0x200000d4

080011b4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 80011b4:	b5b0      	push	{r4, r5, r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
	// Dispatches the next task
	if (SCH_tasks_G[0].RunMe > 0) {
 80011ba:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <SCH_Dispatch_Tasks+0x60>)
 80011bc:	7b1b      	ldrb	r3, [r3, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d023      	beq.n	800120a <SCH_Dispatch_Tasks+0x56>
		(*SCH_tasks_G[0].pTask)(); // Run the task
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <SCH_Dispatch_Tasks+0x60>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4798      	blx	r3
		SCH_tasks_G[0].RunMe -= 1; // Reset RunMe flag
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <SCH_Dispatch_Tasks+0x60>)
 80011ca:	7b1b      	ldrb	r3, [r3, #12]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <SCH_Dispatch_Tasks+0x60>)
 80011d2:	731a      	strb	r2, [r3, #12]

		// Periodic tasks will automatically run again
		// If this is a one-shot task, remove it from the array
		if (SCH_tasks_G[0].Period == 0) {
 80011d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <SCH_Dispatch_Tasks+0x60>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d103      	bne.n	80011e4 <SCH_Dispatch_Tasks+0x30>
			SCH_Delete_Task(0);
 80011dc:	2000      	movs	r0, #0
 80011de:	f000 f885 	bl	80012ec <SCH_Delete_Task>
			SCH_Delete_Task(0);
			SCH_Shift_Task(0);
			SCH_Add_Task(temp.pTask, temp.Delay, temp.Period);
		}
	}
}
 80011e2:	e012      	b.n	800120a <SCH_Dispatch_Tasks+0x56>
			sTasks temp = SCH_tasks_G[0];
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <SCH_Dispatch_Tasks+0x60>)
 80011e6:	1d3c      	adds	r4, r7, #4
 80011e8:	461d      	mov	r5, r3
 80011ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ee:	682b      	ldr	r3, [r5, #0]
 80011f0:	6023      	str	r3, [r4, #0]
			SCH_Delete_Task(0);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 f87a 	bl	80012ec <SCH_Delete_Task>
			SCH_Shift_Task(0);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 f80d 	bl	8001218 <SCH_Shift_Task>
			SCH_Add_Task(temp.pTask, temp.Delay, temp.Period);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff feb7 	bl	8000f78 <SCH_Add_Task>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bdb0      	pop	{r4, r5, r7, pc}
 8001212:	bf00      	nop
 8001214:	200000d4 	.word	0x200000d4

08001218 <SCH_Shift_Task>:

void SCH_Shift_Task(const int TASK_INDEX) {
 8001218:	b4b0      	push	{r4, r5, r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	if (TASK_INDEX != current_index_task - 1) {
 8001220:	4b30      	ldr	r3, [pc, #192]	@ (80012e4 <SCH_Shift_Task+0xcc>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	3b01      	subs	r3, #1
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	d04f      	beq.n	80012cc <SCH_Shift_Task+0xb4>
		for (int i = TASK_INDEX; i < current_index_task - 1; i++) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	e017      	b.n	8001262 <SCH_Shift_Task+0x4a>
			SCH_tasks_G[i] = SCH_tasks_G[i + 1];
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	482c      	ldr	r0, [pc, #176]	@ (80012e8 <SCH_Shift_Task+0xd0>)
 8001238:	68f9      	ldr	r1, [r7, #12]
 800123a:	460b      	mov	r3, r1
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4418      	add	r0, r3
 8001244:	4928      	ldr	r1, [pc, #160]	@ (80012e8 <SCH_Shift_Task+0xd0>)
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	4604      	mov	r4, r0
 8001252:	461d      	mov	r5, r3
 8001254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	6023      	str	r3, [r4, #0]
		for (int i = TASK_INDEX; i < current_index_task - 1; i++) {
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <SCH_Shift_Task+0xcc>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	3b01      	subs	r3, #1
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	429a      	cmp	r2, r3
 800126c:	dbe1      	blt.n	8001232 <SCH_Shift_Task+0x1a>
		}
		SCH_tasks_G[current_index_task - 1].pTask = 0x0000;
 800126e:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <SCH_Shift_Task+0xcc>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	1e5a      	subs	r2, r3, #1
 8001274:	491c      	ldr	r1, [pc, #112]	@ (80012e8 <SCH_Shift_Task+0xd0>)
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task - 1].Delay = 0;
 8001284:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <SCH_Shift_Task+0xcc>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	4917      	ldr	r1, [pc, #92]	@ (80012e8 <SCH_Shift_Task+0xd0>)
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	3304      	adds	r3, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task - 1].Period = 0;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <SCH_Shift_Task+0xcc>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	1e5a      	subs	r2, r3, #1
 80012a2:	4911      	ldr	r1, [pc, #68]	@ (80012e8 <SCH_Shift_Task+0xd0>)
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	3308      	adds	r3, #8
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task - 1].RunMe = 0;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <SCH_Shift_Task+0xcc>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	1e5a      	subs	r2, r3, #1
 80012ba:	490b      	ldr	r1, [pc, #44]	@ (80012e8 <SCH_Shift_Task+0xd0>)
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	330c      	adds	r3, #12
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
	}
	current_index_task--;
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <SCH_Shift_Task+0xcc>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <SCH_Shift_Task+0xcc>)
 80012d6:	701a      	strb	r2, [r3, #0]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bcb0      	pop	{r4, r5, r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	200003f4 	.word	0x200003f4
 80012e8:	200000d4 	.word	0x200000d4

080012ec <SCH_Delete_Task>:

unsigned char SCH_Delete_Task(const int TASK_INDEX) {
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	unsigned char flag;
	flag = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 80012f8:	4916      	ldr	r1, [pc, #88]	@ (8001354 <SCH_Delete_Task+0x68>)
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 800130a:	4912      	ldr	r1, [pc, #72]	@ (8001354 <SCH_Delete_Task+0x68>)
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	3304      	adds	r3, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 800131e:	490d      	ldr	r1, [pc, #52]	@ (8001354 <SCH_Delete_Task+0x68>)
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	3308      	adds	r3, #8
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8001332:	4908      	ldr	r1, [pc, #32]	@ (8001354 <SCH_Delete_Task+0x68>)
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	330c      	adds	r3, #12
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
	return flag; // return status
 8001346:	7bfb      	ldrb	r3, [r7, #15]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	200000d4 	.word	0x200000d4

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HAL_MspInit+0x5c>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a14      	ldr	r2, [pc, #80]	@ (80013b4 <HAL_MspInit+0x5c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <HAL_MspInit+0x5c>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <HAL_MspInit+0x5c>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a0e      	ldr	r2, [pc, #56]	@ (80013b4 <HAL_MspInit+0x5c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <HAL_MspInit+0x5c>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <HAL_MspInit+0x60>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <HAL_MspInit+0x60>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000

080013bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013cc:	d113      	bne.n	80013f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <HAL_TIM_Base_MspInit+0x44>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001400 <HAL_TIM_Base_MspInit+0x44>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_TIM_Base_MspInit+0x44>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	201c      	movs	r0, #28
 80013ec:	f000 fc8b 	bl	8001d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013f0:	201c      	movs	r0, #28
 80013f2:	f000 fca4 	bl	8001d3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <NMI_Handler+0x4>

0800140c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <MemManage_Handler+0x4>

0800141c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <UsageFault_Handler+0x4>

0800142c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001454:	f000 fb64 	bl	8001b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <TIM2_IRQHandler+0x10>)
 8001462:	f001 fac5 	bl	80029f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000008c 	.word	0x2000008c

08001470 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <setTimer1>:
int timer2_counter = 0;

int timer3_flag = 0;
int timer3_counter = 0;

void setTimer1(int duration) {
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <setTimer1+0x2c>)
 8001488:	fb82 1203 	smull	r1, r2, r2, r3
 800148c:	1092      	asrs	r2, r2, #2
 800148e:	17db      	asrs	r3, r3, #31
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	4a06      	ldr	r2, [pc, #24]	@ (80014ac <setTimer1+0x30>)
 8001494:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <setTimer1+0x34>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	66666667 	.word	0x66666667
 80014ac:	200003fc 	.word	0x200003fc
 80014b0:	200003f8 	.word	0x200003f8

080014b4 <setTimer2>:

void setTimer2(int duration) {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a08      	ldr	r2, [pc, #32]	@ (80014e0 <setTimer2+0x2c>)
 80014c0:	fb82 1203 	smull	r1, r2, r2, r3
 80014c4:	1092      	asrs	r2, r2, #2
 80014c6:	17db      	asrs	r3, r3, #31
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <setTimer2+0x30>)
 80014cc:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <setTimer2+0x34>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	66666667 	.word	0x66666667
 80014e4:	20000404 	.word	0x20000404
 80014e8:	20000400 	.word	0x20000400

080014ec <timeRun>:
void setTimer3(int duration) {
	timer3_counter = duration / TIMER_CYCLE;
	timer3_flag = 0;
}

void timeRun() {
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 80014f0:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <timeRun+0x5c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	dd05      	ble.n	8001504 <timeRun+0x18>
		timer1_counter--;
 80014f8:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <timeRun+0x5c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <timeRun+0x5c>)
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e002      	b.n	800150a <timeRun+0x1e>
	} else {
		timer1_flag = 1;
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <timeRun+0x60>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
	}

	if (timer2_counter > 0) {
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <timeRun+0x64>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	dd05      	ble.n	800151e <timeRun+0x32>
		timer2_counter--;
 8001512:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <timeRun+0x64>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3b01      	subs	r3, #1
 8001518:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <timeRun+0x64>)
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	e002      	b.n	8001524 <timeRun+0x38>
	} else {
		timer2_flag = 1;
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <timeRun+0x68>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
	}

	if (timer3_counter > 0) {
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <timeRun+0x6c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	dd05      	ble.n	8001538 <timeRun+0x4c>
		timer3_counter--;
 800152c:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <timeRun+0x6c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3b01      	subs	r3, #1
 8001532:	4a09      	ldr	r2, [pc, #36]	@ (8001558 <timeRun+0x6c>)
 8001534:	6013      	str	r3, [r2, #0]
	} else {
		timer3_flag = 1;
	}
}
 8001536:	e002      	b.n	800153e <timeRun+0x52>
		timer3_flag = 1;
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <timeRun+0x70>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	200003fc 	.word	0x200003fc
 800154c:	200003f8 	.word	0x200003f8
 8001550:	20000404 	.word	0x20000404
 8001554:	20000400 	.word	0x20000400
 8001558:	2000040c 	.word	0x2000040c
 800155c:	20000408 	.word	0x20000408

08001560 <blinkingLeds>:
 *      Author: thinkie
 */

#include "traffic_led.h"

void blinkingLeds(int mode) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    switch (mode) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b04      	cmp	r3, #4
 800156c:	d01b      	beq.n	80015a6 <blinkingLeds+0x46>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b04      	cmp	r3, #4
 8001572:	dc21      	bgt.n	80015b8 <blinkingLeds+0x58>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d003      	beq.n	8001582 <blinkingLeds+0x22>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d009      	beq.n	8001594 <blinkingLeds+0x34>
            HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
            HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
            break;

        default:
            break;
 8001580:	e01a      	b.n	80015b8 <blinkingLeds+0x58>
            HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 8001582:	2101      	movs	r1, #1
 8001584:	480f      	ldr	r0, [pc, #60]	@ (80015c4 <blinkingLeds+0x64>)
 8001586:	f000 fda0 	bl	80020ca <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 800158a:	2108      	movs	r1, #8
 800158c:	480d      	ldr	r0, [pc, #52]	@ (80015c4 <blinkingLeds+0x64>)
 800158e:	f000 fd9c 	bl	80020ca <HAL_GPIO_TogglePin>
            break;
 8001592:	e012      	b.n	80015ba <blinkingLeds+0x5a>
            HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 8001594:	2102      	movs	r1, #2
 8001596:	480b      	ldr	r0, [pc, #44]	@ (80015c4 <blinkingLeds+0x64>)
 8001598:	f000 fd97 	bl	80020ca <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin);
 800159c:	2110      	movs	r1, #16
 800159e:	4809      	ldr	r0, [pc, #36]	@ (80015c4 <blinkingLeds+0x64>)
 80015a0:	f000 fd93 	bl	80020ca <HAL_GPIO_TogglePin>
            break;
 80015a4:	e009      	b.n	80015ba <blinkingLeds+0x5a>
            HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 80015a6:	2104      	movs	r1, #4
 80015a8:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <blinkingLeds+0x64>)
 80015aa:	f000 fd8e 	bl	80020ca <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 80015ae:	2120      	movs	r1, #32
 80015b0:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <blinkingLeds+0x64>)
 80015b2:	f000 fd8a 	bl	80020ca <HAL_GPIO_TogglePin>
            break;
 80015b6:	e000      	b.n	80015ba <blinkingLeds+0x5a>
            break;
 80015b8:	bf00      	nop
    }
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40010800 	.word	0x40010800

080015c8 <offAllLeds>:

void offAllLeds() {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	2101      	movs	r1, #1
 80015d0:	480e      	ldr	r0, [pc, #56]	@ (800160c <offAllLeds+0x44>)
 80015d2:	f000 fd62 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	2102      	movs	r1, #2
 80015da:	480c      	ldr	r0, [pc, #48]	@ (800160c <offAllLeds+0x44>)
 80015dc:	f000 fd5d 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2104      	movs	r1, #4
 80015e4:	4809      	ldr	r0, [pc, #36]	@ (800160c <offAllLeds+0x44>)
 80015e6:	f000 fd58 	bl	800209a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2108      	movs	r1, #8
 80015ee:	4807      	ldr	r0, [pc, #28]	@ (800160c <offAllLeds+0x44>)
 80015f0:	f000 fd53 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2110      	movs	r1, #16
 80015f8:	4804      	ldr	r0, [pc, #16]	@ (800160c <offAllLeds+0x44>)
 80015fa:	f000 fd4e 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	2120      	movs	r1, #32
 8001602:	4802      	ldr	r0, [pc, #8]	@ (800160c <offAllLeds+0x44>)
 8001604:	f000 fd49 	bl	800209a <HAL_GPIO_WritePin>
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40010800 	.word	0x40010800

08001610 <setRed1>:

void setRed1() {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2101      	movs	r1, #1
 8001618:	4807      	ldr	r0, [pc, #28]	@ (8001638 <setRed1+0x28>)
 800161a:	f000 fd3e 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2102      	movs	r1, #2
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <setRed1+0x28>)
 8001624:	f000 fd39 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 8001628:	2201      	movs	r2, #1
 800162a:	2104      	movs	r1, #4
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <setRed1+0x28>)
 800162e:	f000 fd34 	bl	800209a <HAL_GPIO_WritePin>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40010800 	.word	0x40010800

0800163c <setYellow1>:
void setYellow1() {
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2101      	movs	r1, #1
 8001644:	4807      	ldr	r0, [pc, #28]	@ (8001664 <setYellow1+0x28>)
 8001646:	f000 fd28 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2102      	movs	r1, #2
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <setYellow1+0x28>)
 8001650:	f000 fd23 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 8001654:	2201      	movs	r2, #1
 8001656:	2104      	movs	r1, #4
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <setYellow1+0x28>)
 800165a:	f000 fd1e 	bl	800209a <HAL_GPIO_WritePin>
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40010800 	.word	0x40010800

08001668 <setGreen1>:
void setGreen1() {
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2101      	movs	r1, #1
 8001670:	4807      	ldr	r0, [pc, #28]	@ (8001690 <setGreen1+0x28>)
 8001672:	f000 fd12 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 8001676:	2201      	movs	r2, #1
 8001678:	2102      	movs	r1, #2
 800167a:	4805      	ldr	r0, [pc, #20]	@ (8001690 <setGreen1+0x28>)
 800167c:	f000 fd0d 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2104      	movs	r1, #4
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <setGreen1+0x28>)
 8001686:	f000 fd08 	bl	800209a <HAL_GPIO_WritePin>
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40010800 	.word	0x40010800

08001694 <setRed2>:

void setRed2() {
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2108      	movs	r1, #8
 800169c:	4807      	ldr	r0, [pc, #28]	@ (80016bc <setRed2+0x28>)
 800169e:	f000 fcfc 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2110      	movs	r1, #16
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <setRed2+0x28>)
 80016a8:	f000 fcf7 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2120      	movs	r1, #32
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <setRed2+0x28>)
 80016b2:	f000 fcf2 	bl	800209a <HAL_GPIO_WritePin>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40010800 	.word	0x40010800

080016c0 <setYellow2>:
void setYellow2() {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2108      	movs	r1, #8
 80016c8:	4807      	ldr	r0, [pc, #28]	@ (80016e8 <setYellow2+0x28>)
 80016ca:	f000 fce6 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2110      	movs	r1, #16
 80016d2:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <setYellow2+0x28>)
 80016d4:	f000 fce1 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	2120      	movs	r1, #32
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <setYellow2+0x28>)
 80016de:	f000 fcdc 	bl	800209a <HAL_GPIO_WritePin>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40010800 	.word	0x40010800

080016ec <setGreen2>:
void setGreen2() {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2108      	movs	r1, #8
 80016f4:	4807      	ldr	r0, [pc, #28]	@ (8001714 <setGreen2+0x28>)
 80016f6:	f000 fcd0 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 80016fa:	2201      	movs	r2, #1
 80016fc:	2110      	movs	r1, #16
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <setGreen2+0x28>)
 8001700:	f000 fccb 	bl	800209a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	2120      	movs	r1, #32
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <setGreen2+0x28>)
 800170a:	f000 fcc6 	bl	800209a <HAL_GPIO_WritePin>
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40010800 	.word	0x40010800

08001718 <trafficRun>:
#include "traffic_process.h"

int segOrder;
int setTime;

void trafficRun() {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	//traffic system works as 4 modes
	switch (mode) {
 800171c:	4b95      	ldr	r3, [pc, #596]	@ (8001974 <trafficRun+0x25c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b04      	cmp	r3, #4
 8001722:	f200 817a 	bhi.w	8001a1a <trafficRun+0x302>
 8001726:	a201      	add	r2, pc, #4	@ (adr r2, 800172c <trafficRun+0x14>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	08001741 	.word	0x08001741
 8001730:	0800175b 	.word	0x0800175b
 8001734:	080017dd 	.word	0x080017dd
 8001738:	08001895 	.word	0x08001895
 800173c:	0800194b 	.word	0x0800194b
	//Init mode, in here we preset all values then change to MODE1
	case INIT: {
		segOrder = 2;
 8001740:	4b8d      	ldr	r3, [pc, #564]	@ (8001978 <trafficRun+0x260>)
 8001742:	2202      	movs	r2, #2
 8001744:	601a      	str	r2, [r3, #0]
		segRun1();
 8001746:	f7ff fa01 	bl	8000b4c <segRun1>
		setTimer2(500);
 800174a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800174e:	f7ff feb1 	bl	80014b4 <setTimer2>
		mode = MODE1;
 8001752:	4b88      	ldr	r3, [pc, #544]	@ (8001974 <trafficRun+0x25c>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]
		break;
 8001758:	e168      	b.n	8001a2c <trafficRun+0x314>
	}
	case MODE1: {
		//In MODE1, we have 2 traffic systems to control
		normalMode();
 800175a:	f7ff fb45 	bl	8000de8 <normalMode>
		if (timer2_flag == 1) {
 800175e:	4b87      	ldr	r3, [pc, #540]	@ (800197c <trafficRun+0x264>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d11e      	bne.n	80017a4 <trafficRun+0x8c>
			setTimer2(500);
 8001766:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800176a:	f7ff fea3 	bl	80014b4 <setTimer2>
			if (segOrder == 2) {
 800176e:	4b82      	ldr	r3, [pc, #520]	@ (8001978 <trafficRun+0x260>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d10f      	bne.n	8001796 <trafficRun+0x7e>
				segRun2();
 8001776:	f7ff f9fd 	bl	8000b74 <segRun2>
				segValueTime--;
 800177a:	4b81      	ldr	r3, [pc, #516]	@ (8001980 <trafficRun+0x268>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3b01      	subs	r3, #1
 8001780:	4a7f      	ldr	r2, [pc, #508]	@ (8001980 <trafficRun+0x268>)
 8001782:	6013      	str	r3, [r2, #0]
				segModeTime--;
 8001784:	4b7f      	ldr	r3, [pc, #508]	@ (8001984 <trafficRun+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	4a7e      	ldr	r2, [pc, #504]	@ (8001984 <trafficRun+0x26c>)
 800178c:	6013      	str	r3, [r2, #0]
				segOrder = 0;
 800178e:	4b7a      	ldr	r3, [pc, #488]	@ (8001978 <trafficRun+0x260>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e001      	b.n	800179a <trafficRun+0x82>
			} else {
				segRun1();
 8001796:	f7ff f9d9 	bl	8000b4c <segRun1>
			}
			segOrder++;
 800179a:	4b77      	ldr	r3, [pc, #476]	@ (8001978 <trafficRun+0x260>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a75      	ldr	r2, [pc, #468]	@ (8001978 <trafficRun+0x260>)
 80017a2:	6013      	str	r3, [r2, #0]
		}
		//if we press button 1, system will change to MODE2
		if (isButtonPressed(BUTTON_1) == 1) {
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7fe fcd1 	bl	800014c <isButtonPressed>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	f040 8136 	bne.w	8001a1e <trafficRun+0x306>
			setTimer2(500);
 80017b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017b6:	f7ff fe7d 	bl	80014b4 <setTimer2>
			setTime = redTime;
 80017ba:	4b73      	ldr	r3, [pc, #460]	@ (8001988 <trafficRun+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a73      	ldr	r2, [pc, #460]	@ (800198c <trafficRun+0x274>)
 80017c0:	6013      	str	r3, [r2, #0]
			segModeTime = MODE2;
 80017c2:	4b70      	ldr	r3, [pc, #448]	@ (8001984 <trafficRun+0x26c>)
 80017c4:	2202      	movs	r2, #2
 80017c6:	601a      	str	r2, [r3, #0]
			segValueTime = redTime;
 80017c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001988 <trafficRun+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a6c      	ldr	r2, [pc, #432]	@ (8001980 <trafficRun+0x268>)
 80017ce:	6013      	str	r3, [r2, #0]
			mode = MODE2;
 80017d0:	4b68      	ldr	r3, [pc, #416]	@ (8001974 <trafficRun+0x25c>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	601a      	str	r2, [r3, #0]
			offAllLeds();
 80017d6:	f7ff fef7 	bl	80015c8 <offAllLeds>
		}
		break;
 80017da:	e120      	b.n	8001a1e <trafficRun+0x306>
	}
	case MODE2: {
		//In MODE2, we use button 2 and 3 to adjust duration of red light
		if (timer2_flag == 1) {
 80017dc:	4b67      	ldr	r3, [pc, #412]	@ (800197c <trafficRun+0x264>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d117      	bne.n	8001814 <trafficRun+0xfc>
			setTimer2(500);
 80017e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017e8:	f7ff fe64 	bl	80014b4 <setTimer2>
			blinkingLeds(MODE2);
 80017ec:	2002      	movs	r0, #2
 80017ee:	f7ff feb7 	bl	8001560 <blinkingLeds>
			if (segOrder == 2) {
 80017f2:	4b61      	ldr	r3, [pc, #388]	@ (8001978 <trafficRun+0x260>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d105      	bne.n	8001806 <trafficRun+0xee>
				segRun2();
 80017fa:	f7ff f9bb 	bl	8000b74 <segRun2>
				segOrder = 0;
 80017fe:	4b5e      	ldr	r3, [pc, #376]	@ (8001978 <trafficRun+0x260>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	e001      	b.n	800180a <trafficRun+0xf2>
			} else {
				segRun1();
 8001806:	f7ff f9a1 	bl	8000b4c <segRun1>
			}
			segOrder++;
 800180a:	4b5b      	ldr	r3, [pc, #364]	@ (8001978 <trafficRun+0x260>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	4a59      	ldr	r2, [pc, #356]	@ (8001978 <trafficRun+0x260>)
 8001812:	6013      	str	r3, [r2, #0]
		}
		//if we press button 1, system will change to MODE3
		if (isButtonPressed(BUTTON_1) == 1) {
 8001814:	2000      	movs	r0, #0
 8001816:	f7fe fc99 	bl	800014c <isButtonPressed>
 800181a:	4603      	mov	r3, r0
 800181c:	2b01      	cmp	r3, #1
 800181e:	d113      	bne.n	8001848 <trafficRun+0x130>
			setTimer2(500);
 8001820:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001824:	f7ff fe46 	bl	80014b4 <setTimer2>
			setTime = yellowTime;
 8001828:	4b59      	ldr	r3, [pc, #356]	@ (8001990 <trafficRun+0x278>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a57      	ldr	r2, [pc, #348]	@ (800198c <trafficRun+0x274>)
 800182e:	6013      	str	r3, [r2, #0]
			segModeTime = MODE3;
 8001830:	4b54      	ldr	r3, [pc, #336]	@ (8001984 <trafficRun+0x26c>)
 8001832:	2203      	movs	r2, #3
 8001834:	601a      	str	r2, [r3, #0]
			segValueTime = yellowTime;
 8001836:	4b56      	ldr	r3, [pc, #344]	@ (8001990 <trafficRun+0x278>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a51      	ldr	r2, [pc, #324]	@ (8001980 <trafficRun+0x268>)
 800183c:	6013      	str	r3, [r2, #0]
			mode = MODE3;
 800183e:	4b4d      	ldr	r3, [pc, #308]	@ (8001974 <trafficRun+0x25c>)
 8001840:	2203      	movs	r2, #3
 8001842:	601a      	str	r2, [r3, #0]
			offAllLeds();
 8001844:	f7ff fec0 	bl	80015c8 <offAllLeds>
		}
		//if we press button 2, duration of red light will increase 1s
		if (isButtonPressed(BUTTON_2) == 1) {
 8001848:	2001      	movs	r0, #1
 800184a:	f7fe fc7f 	bl	800014c <isButtonPressed>
 800184e:	4603      	mov	r3, r0
 8001850:	2b01      	cmp	r3, #1
 8001852:	d10f      	bne.n	8001874 <trafficRun+0x15c>
			if (setTime > 99) {
 8001854:	4b4d      	ldr	r3, [pc, #308]	@ (800198c <trafficRun+0x274>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b63      	cmp	r3, #99	@ 0x63
 800185a:	dd02      	ble.n	8001862 <trafficRun+0x14a>
				setTime = 1;
 800185c:	4b4b      	ldr	r3, [pc, #300]	@ (800198c <trafficRun+0x274>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]
			}
			setTime++;
 8001862:	4b4a      	ldr	r3, [pc, #296]	@ (800198c <trafficRun+0x274>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a48      	ldr	r2, [pc, #288]	@ (800198c <trafficRun+0x274>)
 800186a:	6013      	str	r3, [r2, #0]
			segValueTime = setTime;
 800186c:	4b47      	ldr	r3, [pc, #284]	@ (800198c <trafficRun+0x274>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a43      	ldr	r2, [pc, #268]	@ (8001980 <trafficRun+0x268>)
 8001872:	6013      	str	r3, [r2, #0]
		}
		//if we press button 3, system will save the change to red light
		if (isButtonPressed(BUTTON_3) == 1) {
 8001874:	2002      	movs	r0, #2
 8001876:	f7fe fc69 	bl	800014c <isButtonPressed>
 800187a:	4603      	mov	r3, r0
 800187c:	2b01      	cmp	r3, #1
 800187e:	f040 80d0 	bne.w	8001a22 <trafficRun+0x30a>
			redTime = setTime;
 8001882:	4b42      	ldr	r3, [pc, #264]	@ (800198c <trafficRun+0x274>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a40      	ldr	r2, [pc, #256]	@ (8001988 <trafficRun+0x270>)
 8001888:	6013      	str	r3, [r2, #0]
			segValueTime = redTime;
 800188a:	4b3f      	ldr	r3, [pc, #252]	@ (8001988 <trafficRun+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a3c      	ldr	r2, [pc, #240]	@ (8001980 <trafficRun+0x268>)
 8001890:	6013      	str	r3, [r2, #0]
		}
		break;
 8001892:	e0c6      	b.n	8001a22 <trafficRun+0x30a>
		//MODE3 is similar to MODE2
	}
	case MODE3: {
		if (timer2_flag == 1) {
 8001894:	4b39      	ldr	r3, [pc, #228]	@ (800197c <trafficRun+0x264>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d117      	bne.n	80018cc <trafficRun+0x1b4>
			setTimer2(500);
 800189c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018a0:	f7ff fe08 	bl	80014b4 <setTimer2>
			blinkingLeds(MODE3);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f7ff fe5b 	bl	8001560 <blinkingLeds>
			if (segOrder == 2) {
 80018aa:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <trafficRun+0x260>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d105      	bne.n	80018be <trafficRun+0x1a6>
				segRun2();
 80018b2:	f7ff f95f 	bl	8000b74 <segRun2>
				segOrder = 0;
 80018b6:	4b30      	ldr	r3, [pc, #192]	@ (8001978 <trafficRun+0x260>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e001      	b.n	80018c2 <trafficRun+0x1aa>
			} else {
				segRun1();
 80018be:	f7ff f945 	bl	8000b4c <segRun1>
			}
			segOrder++;
 80018c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001978 <trafficRun+0x260>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001978 <trafficRun+0x260>)
 80018ca:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(BUTTON_1) == 1) {
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7fe fc3d 	bl	800014c <isButtonPressed>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d113      	bne.n	8001900 <trafficRun+0x1e8>
			setTimer2(500);
 80018d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018dc:	f7ff fdea 	bl	80014b4 <setTimer2>
			setTime = greenTime;
 80018e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <trafficRun+0x27c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a29      	ldr	r2, [pc, #164]	@ (800198c <trafficRun+0x274>)
 80018e6:	6013      	str	r3, [r2, #0]
			segModeTime = MODE4;
 80018e8:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <trafficRun+0x26c>)
 80018ea:	2204      	movs	r2, #4
 80018ec:	601a      	str	r2, [r3, #0]
			segValueTime = greenTime;
 80018ee:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <trafficRun+0x27c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a23      	ldr	r2, [pc, #140]	@ (8001980 <trafficRun+0x268>)
 80018f4:	6013      	str	r3, [r2, #0]
			mode = MODE4;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <trafficRun+0x25c>)
 80018f8:	2204      	movs	r2, #4
 80018fa:	601a      	str	r2, [r3, #0]
			offAllLeds();
 80018fc:	f7ff fe64 	bl	80015c8 <offAllLeds>
		}
		if (isButtonPressed(BUTTON_2) == 1) {
 8001900:	2001      	movs	r0, #1
 8001902:	f7fe fc23 	bl	800014c <isButtonPressed>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d10f      	bne.n	800192c <trafficRun+0x214>
			if (setTime > 99) {
 800190c:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <trafficRun+0x274>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b63      	cmp	r3, #99	@ 0x63
 8001912:	dd02      	ble.n	800191a <trafficRun+0x202>
				setTime = 1;
 8001914:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <trafficRun+0x274>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]
			}
			setTime++;
 800191a:	4b1c      	ldr	r3, [pc, #112]	@ (800198c <trafficRun+0x274>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	4a1a      	ldr	r2, [pc, #104]	@ (800198c <trafficRun+0x274>)
 8001922:	6013      	str	r3, [r2, #0]
			segValueTime = setTime;
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <trafficRun+0x274>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a15      	ldr	r2, [pc, #84]	@ (8001980 <trafficRun+0x268>)
 800192a:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(BUTTON_3) == 1) {
 800192c:	2002      	movs	r0, #2
 800192e:	f7fe fc0d 	bl	800014c <isButtonPressed>
 8001932:	4603      	mov	r3, r0
 8001934:	2b01      	cmp	r3, #1
 8001936:	d176      	bne.n	8001a26 <trafficRun+0x30e>
			yellowTime = setTime;
 8001938:	4b14      	ldr	r3, [pc, #80]	@ (800198c <trafficRun+0x274>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a14      	ldr	r2, [pc, #80]	@ (8001990 <trafficRun+0x278>)
 800193e:	6013      	str	r3, [r2, #0]
			segValueTime = yellowTime;
 8001940:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <trafficRun+0x278>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0e      	ldr	r2, [pc, #56]	@ (8001980 <trafficRun+0x268>)
 8001946:	6013      	str	r3, [r2, #0]
		}
		break;
 8001948:	e06d      	b.n	8001a26 <trafficRun+0x30e>
		//MODE4 is similar to MODE1
	}
	case MODE4: {
		if (timer2_flag == 1) {
 800194a:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <trafficRun+0x264>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d129      	bne.n	80019a6 <trafficRun+0x28e>
			setTimer2(500);
 8001952:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001956:	f7ff fdad 	bl	80014b4 <setTimer2>
			blinkingLeds(MODE4);
 800195a:	2004      	movs	r0, #4
 800195c:	f7ff fe00 	bl	8001560 <blinkingLeds>
			if (segOrder == 2) {
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <trafficRun+0x260>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d117      	bne.n	8001998 <trafficRun+0x280>
				segRun2();
 8001968:	f7ff f904 	bl	8000b74 <segRun2>
				segOrder = 0;
 800196c:	4b02      	ldr	r3, [pc, #8]	@ (8001978 <trafficRun+0x260>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e013      	b.n	800199c <trafficRun+0x284>
 8001974:	20000070 	.word	0x20000070
 8001978:	20000410 	.word	0x20000410
 800197c:	20000400 	.word	0x20000400
 8001980:	20000088 	.word	0x20000088
 8001984:	20000084 	.word	0x20000084
 8001988:	20000080 	.word	0x20000080
 800198c:	20000414 	.word	0x20000414
 8001990:	20000078 	.word	0x20000078
 8001994:	2000007c 	.word	0x2000007c
			} else {
				segRun1();
 8001998:	f7ff f8d8 	bl	8000b4c <segRun1>
			}
			segOrder++;
 800199c:	4b24      	ldr	r3, [pc, #144]	@ (8001a30 <trafficRun+0x318>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a23      	ldr	r2, [pc, #140]	@ (8001a30 <trafficRun+0x318>)
 80019a4:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(BUTTON_1) == 1) {
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7fe fbd0 	bl	800014c <isButtonPressed>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d10e      	bne.n	80019d0 <trafficRun+0x2b8>
			nmode = init;
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <trafficRun+0x31c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
			segOrder = 2;
 80019b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <trafficRun+0x318>)
 80019ba:	2202      	movs	r2, #2
 80019bc:	601a      	str	r2, [r3, #0]
			segRun1();
 80019be:	f7ff f8c5 	bl	8000b4c <segRun1>
			setTimer2(500);
 80019c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019c6:	f7ff fd75 	bl	80014b4 <setTimer2>
			mode = MODE1;
 80019ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <trafficRun+0x320>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(BUTTON_2) == 1) {
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7fe fbbb 	bl	800014c <isButtonPressed>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d10f      	bne.n	80019fc <trafficRun+0x2e4>
			if (setTime > 99) {
 80019dc:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <trafficRun+0x324>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b63      	cmp	r3, #99	@ 0x63
 80019e2:	dd02      	ble.n	80019ea <trafficRun+0x2d2>
				setTime = 1;
 80019e4:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <trafficRun+0x324>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
			}
			setTime++;
 80019ea:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <trafficRun+0x324>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3301      	adds	r3, #1
 80019f0:	4a12      	ldr	r2, [pc, #72]	@ (8001a3c <trafficRun+0x324>)
 80019f2:	6013      	str	r3, [r2, #0]
			segValueTime = setTime;
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <trafficRun+0x324>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a11      	ldr	r2, [pc, #68]	@ (8001a40 <trafficRun+0x328>)
 80019fa:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(BUTTON_3) == 1) {
 80019fc:	2002      	movs	r0, #2
 80019fe:	f7fe fba5 	bl	800014c <isButtonPressed>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d110      	bne.n	8001a2a <trafficRun+0x312>
			greenTime = setTime;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <trafficRun+0x324>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a44 <trafficRun+0x32c>)
 8001a0e:	6013      	str	r3, [r2, #0]
			segValueTime = greenTime;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <trafficRun+0x32c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <trafficRun+0x328>)
 8001a16:	6013      	str	r3, [r2, #0]
		}
		break;
 8001a18:	e007      	b.n	8001a2a <trafficRun+0x312>
	}
	default:
		break;
 8001a1a:	bf00      	nop
 8001a1c:	e006      	b.n	8001a2c <trafficRun+0x314>
		break;
 8001a1e:	bf00      	nop
 8001a20:	e004      	b.n	8001a2c <trafficRun+0x314>
		break;
 8001a22:	bf00      	nop
 8001a24:	e002      	b.n	8001a2c <trafficRun+0x314>
		break;
 8001a26:	bf00      	nop
 8001a28:	e000      	b.n	8001a2c <trafficRun+0x314>
		break;
 8001a2a:	bf00      	nop
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000410 	.word	0x20000410
 8001a34:	20000074 	.word	0x20000074
 8001a38:	20000070 	.word	0x20000070
 8001a3c:	20000414 	.word	0x20000414
 8001a40:	20000088 	.word	0x20000088
 8001a44:	2000007c 	.word	0x2000007c

08001a48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a48:	f7ff fd12 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a4c:	480b      	ldr	r0, [pc, #44]	@ (8001a7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a4e:	490c      	ldr	r1, [pc, #48]	@ (8001a80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a50:	4a0c      	ldr	r2, [pc, #48]	@ (8001a84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a09      	ldr	r2, [pc, #36]	@ (8001a88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a64:	4c09      	ldr	r4, [pc, #36]	@ (8001a8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a72:	f001 fb05 	bl	8003080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a76:	f7ff f891 	bl	8000b9c <main>
  bx lr
 8001a7a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a80:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001a84:	0800310c 	.word	0x0800310c
  ldr r2, =_sbss
 8001a88:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001a8c:	2000041c 	.word	0x2000041c

08001a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC1_2_IRQHandler>
	...

08001a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <HAL_Init+0x28>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	@ (8001abc <HAL_Init+0x28>)
 8001a9e:	f043 0310 	orr.w	r3, r3, #16
 8001aa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f000 f923 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aaa:	200f      	movs	r0, #15
 8001aac:	f000 f808 	bl	8001ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab0:	f7ff fc52 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40022000 	.word	0x40022000

08001ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <HAL_InitTick+0x54>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_InitTick+0x58>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f93b 	bl	8001d5a <HAL_SYSTICK_Config>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00e      	b.n	8001b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b0f      	cmp	r3, #15
 8001af2:	d80a      	bhi.n	8001b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af4:	2200      	movs	r2, #0
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f000 f903 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b00:	4a06      	ldr	r2, [pc, #24]	@ (8001b1c <HAL_InitTick+0x5c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000030 	.word	0x20000030
 8001b18:	20000038 	.word	0x20000038
 8001b1c:	20000034 	.word	0x20000034

08001b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_IncTick+0x1c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <HAL_IncTick+0x20>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a03      	ldr	r2, [pc, #12]	@ (8001b40 <HAL_IncTick+0x20>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	20000038 	.word	0x20000038
 8001b40:	20000418 	.word	0x20000418

08001b44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b02      	ldr	r3, [pc, #8]	@ (8001b54 <HAL_GetTick+0x10>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	20000418 	.word	0x20000418

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4906      	ldr	r1, [pc, #24]	@ (8001bf0 <__NVIC_EnableIRQ+0x34>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	db0a      	blt.n	8001c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	490c      	ldr	r1, [pc, #48]	@ (8001c40 <__NVIC_SetPriority+0x4c>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	440b      	add	r3, r1
 8001c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c1c:	e00a      	b.n	8001c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4908      	ldr	r1, [pc, #32]	@ (8001c44 <__NVIC_SetPriority+0x50>)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3b04      	subs	r3, #4
 8001c2c:	0112      	lsls	r2, r2, #4
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	440b      	add	r3, r1
 8001c32:	761a      	strb	r2, [r3, #24]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000e100 	.word	0xe000e100
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	@ 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f1c3 0307 	rsb	r3, r3, #7
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	bf28      	it	cs
 8001c66:	2304      	movcs	r3, #4
 8001c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d902      	bls.n	8001c78 <NVIC_EncodePriority+0x30>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3b03      	subs	r3, #3
 8001c76:	e000      	b.n	8001c7a <NVIC_EncodePriority+0x32>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	4313      	orrs	r3, r2
         );
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	@ 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f7ff ff90 	bl	8001bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff2d 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d18:	f7ff ff42 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7ff ff90 	bl	8001c48 <NVIC_EncodePriority>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff5f 	bl	8001bf4 <__NVIC_SetPriority>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff35 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffa2 	bl	8001cac <SysTick_Config>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b08b      	sub	sp, #44	@ 0x2c
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d86:	e161      	b.n	800204c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	f040 8150 	bne.w	8002046 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4a97      	ldr	r2, [pc, #604]	@ (8002008 <HAL_GPIO_Init+0x294>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d05e      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001db0:	4a95      	ldr	r2, [pc, #596]	@ (8002008 <HAL_GPIO_Init+0x294>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d875      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001db6:	4a95      	ldr	r2, [pc, #596]	@ (800200c <HAL_GPIO_Init+0x298>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d058      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001dbc:	4a93      	ldr	r2, [pc, #588]	@ (800200c <HAL_GPIO_Init+0x298>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d86f      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dc2:	4a93      	ldr	r2, [pc, #588]	@ (8002010 <HAL_GPIO_Init+0x29c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d052      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001dc8:	4a91      	ldr	r2, [pc, #580]	@ (8002010 <HAL_GPIO_Init+0x29c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d869      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dce:	4a91      	ldr	r2, [pc, #580]	@ (8002014 <HAL_GPIO_Init+0x2a0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d04c      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001dd4:	4a8f      	ldr	r2, [pc, #572]	@ (8002014 <HAL_GPIO_Init+0x2a0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d863      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dda:	4a8f      	ldr	r2, [pc, #572]	@ (8002018 <HAL_GPIO_Init+0x2a4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d046      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
 8001de0:	4a8d      	ldr	r2, [pc, #564]	@ (8002018 <HAL_GPIO_Init+0x2a4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d85d      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001de6:	2b12      	cmp	r3, #18
 8001de8:	d82a      	bhi.n	8001e40 <HAL_GPIO_Init+0xcc>
 8001dea:	2b12      	cmp	r3, #18
 8001dec:	d859      	bhi.n	8001ea2 <HAL_GPIO_Init+0x12e>
 8001dee:	a201      	add	r2, pc, #4	@ (adr r2, 8001df4 <HAL_GPIO_Init+0x80>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e6f 	.word	0x08001e6f
 8001df8:	08001e49 	.word	0x08001e49
 8001dfc:	08001e5b 	.word	0x08001e5b
 8001e00:	08001e9d 	.word	0x08001e9d
 8001e04:	08001ea3 	.word	0x08001ea3
 8001e08:	08001ea3 	.word	0x08001ea3
 8001e0c:	08001ea3 	.word	0x08001ea3
 8001e10:	08001ea3 	.word	0x08001ea3
 8001e14:	08001ea3 	.word	0x08001ea3
 8001e18:	08001ea3 	.word	0x08001ea3
 8001e1c:	08001ea3 	.word	0x08001ea3
 8001e20:	08001ea3 	.word	0x08001ea3
 8001e24:	08001ea3 	.word	0x08001ea3
 8001e28:	08001ea3 	.word	0x08001ea3
 8001e2c:	08001ea3 	.word	0x08001ea3
 8001e30:	08001ea3 	.word	0x08001ea3
 8001e34:	08001ea3 	.word	0x08001ea3
 8001e38:	08001e51 	.word	0x08001e51
 8001e3c:	08001e65 	.word	0x08001e65
 8001e40:	4a76      	ldr	r2, [pc, #472]	@ (800201c <HAL_GPIO_Init+0x2a8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e46:	e02c      	b.n	8001ea2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	623b      	str	r3, [r7, #32]
          break;
 8001e4e:	e029      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	3304      	adds	r3, #4
 8001e56:	623b      	str	r3, [r7, #32]
          break;
 8001e58:	e024      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	3308      	adds	r3, #8
 8001e60:	623b      	str	r3, [r7, #32]
          break;
 8001e62:	e01f      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	330c      	adds	r3, #12
 8001e6a:	623b      	str	r3, [r7, #32]
          break;
 8001e6c:	e01a      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e76:	2304      	movs	r3, #4
 8001e78:	623b      	str	r3, [r7, #32]
          break;
 8001e7a:	e013      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d105      	bne.n	8001e90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e84:	2308      	movs	r3, #8
 8001e86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	611a      	str	r2, [r3, #16]
          break;
 8001e8e:	e009      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e90:	2308      	movs	r3, #8
 8001e92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	615a      	str	r2, [r3, #20]
          break;
 8001e9a:	e003      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
          break;
 8001ea0:	e000      	b.n	8001ea4 <HAL_GPIO_Init+0x130>
          break;
 8001ea2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2bff      	cmp	r3, #255	@ 0xff
 8001ea8:	d801      	bhi.n	8001eae <HAL_GPIO_Init+0x13a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	e001      	b.n	8001eb2 <HAL_GPIO_Init+0x13e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2bff      	cmp	r3, #255	@ 0xff
 8001eb8:	d802      	bhi.n	8001ec0 <HAL_GPIO_Init+0x14c>
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	e002      	b.n	8001ec6 <HAL_GPIO_Init+0x152>
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	3b08      	subs	r3, #8
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	210f      	movs	r1, #15
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	6a39      	ldr	r1, [r7, #32]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80a9 	beq.w	8002046 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef4:	4b4a      	ldr	r3, [pc, #296]	@ (8002020 <HAL_GPIO_Init+0x2ac>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a49      	ldr	r2, [pc, #292]	@ (8002020 <HAL_GPIO_Init+0x2ac>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b47      	ldr	r3, [pc, #284]	@ (8002020 <HAL_GPIO_Init+0x2ac>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f0c:	4a45      	ldr	r2, [pc, #276]	@ (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3d      	ldr	r2, [pc, #244]	@ (8002028 <HAL_GPIO_Init+0x2b4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00d      	beq.n	8001f54 <HAL_GPIO_Init+0x1e0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3c      	ldr	r2, [pc, #240]	@ (800202c <HAL_GPIO_Init+0x2b8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <HAL_GPIO_Init+0x1dc>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3b      	ldr	r2, [pc, #236]	@ (8002030 <HAL_GPIO_Init+0x2bc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d101      	bne.n	8001f4c <HAL_GPIO_Init+0x1d8>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e004      	b.n	8001f56 <HAL_GPIO_Init+0x1e2>
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e002      	b.n	8001f56 <HAL_GPIO_Init+0x1e2>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_GPIO_Init+0x1e2>
 8001f54:	2300      	movs	r3, #0
 8001f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f58:	f002 0203 	and.w	r2, r2, #3
 8001f5c:	0092      	lsls	r2, r2, #2
 8001f5e:	4093      	lsls	r3, r2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f66:	492f      	ldr	r1, [pc, #188]	@ (8002024 <HAL_GPIO_Init+0x2b0>)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f80:	4b2c      	ldr	r3, [pc, #176]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	492b      	ldr	r1, [pc, #172]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f8e:	4b29      	ldr	r3, [pc, #164]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4927      	ldr	r1, [pc, #156]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa8:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	4921      	ldr	r1, [pc, #132]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60cb      	str	r3, [r1, #12]
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	491d      	ldr	r1, [pc, #116]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fd0:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4917      	ldr	r1, [pc, #92]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fde:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4913      	ldr	r1, [pc, #76]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01f      	beq.n	8002038 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	490d      	ldr	r1, [pc, #52]	@ (8002034 <HAL_GPIO_Init+0x2c0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e01f      	b.n	8002046 <HAL_GPIO_Init+0x2d2>
 8002006:	bf00      	nop
 8002008:	10320000 	.word	0x10320000
 800200c:	10310000 	.word	0x10310000
 8002010:	10220000 	.word	0x10220000
 8002014:	10210000 	.word	0x10210000
 8002018:	10120000 	.word	0x10120000
 800201c:	10110000 	.word	0x10110000
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000
 8002028:	40010800 	.word	0x40010800
 800202c:	40010c00 	.word	0x40010c00
 8002030:	40011000 	.word	0x40011000
 8002034:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_GPIO_Init+0x2f4>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	43db      	mvns	r3, r3
 8002040:	4909      	ldr	r1, [pc, #36]	@ (8002068 <HAL_GPIO_Init+0x2f4>)
 8002042:	4013      	ands	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	3301      	adds	r3, #1
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	f47f ae96 	bne.w	8001d88 <HAL_GPIO_Init+0x14>
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	372c      	adds	r7, #44	@ 0x2c
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	e001      	b.n	800208e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	807b      	strh	r3, [r7, #2]
 80020a6:	4613      	mov	r3, r2
 80020a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020aa:	787b      	ldrb	r3, [r7, #1]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b0:	887a      	ldrh	r2, [r7, #2]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020b6:	e003      	b.n	80020c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	041a      	lsls	r2, r3, #16
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020dc:	887a      	ldrh	r2, [r7, #2]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4013      	ands	r3, r2
 80020e2:	041a      	lsls	r2, r3, #16
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	887b      	ldrh	r3, [r7, #2]
 80020ea:	400b      	ands	r3, r1
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e272      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8087 	beq.w	800222a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800211c:	4b92      	ldr	r3, [pc, #584]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b04      	cmp	r3, #4
 8002126:	d00c      	beq.n	8002142 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002128:	4b8f      	ldr	r3, [pc, #572]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b08      	cmp	r3, #8
 8002132:	d112      	bne.n	800215a <HAL_RCC_OscConfig+0x5e>
 8002134:	4b8c      	ldr	r3, [pc, #560]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002140:	d10b      	bne.n	800215a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002142:	4b89      	ldr	r3, [pc, #548]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d06c      	beq.n	8002228 <HAL_RCC_OscConfig+0x12c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d168      	bne.n	8002228 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e24c      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x76>
 8002164:	4b80      	ldr	r3, [pc, #512]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a7f      	ldr	r2, [pc, #508]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 800216a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	e02e      	b.n	80021d0 <HAL_RCC_OscConfig+0xd4>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x98>
 800217a:	4b7b      	ldr	r3, [pc, #492]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a7a      	ldr	r2, [pc, #488]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b78      	ldr	r3, [pc, #480]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a77      	ldr	r2, [pc, #476]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 800218c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e01d      	b.n	80021d0 <HAL_RCC_OscConfig+0xd4>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0xbc>
 800219e:	4b72      	ldr	r3, [pc, #456]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a71      	ldr	r2, [pc, #452]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b6f      	ldr	r3, [pc, #444]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e00b      	b.n	80021d0 <HAL_RCC_OscConfig+0xd4>
 80021b8:	4b6b      	ldr	r3, [pc, #428]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a6a      	ldr	r2, [pc, #424]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	4b68      	ldr	r3, [pc, #416]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a67      	ldr	r2, [pc, #412]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d013      	beq.n	8002200 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fcb4 	bl	8001b44 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e0:	f7ff fcb0 	bl	8001b44 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	@ 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e200      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0xe4>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7ff fca0 	bl	8001b44 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002208:	f7ff fc9c 	bl	8001b44 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	@ 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e1ec      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	4b53      	ldr	r3, [pc, #332]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x10c>
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d063      	beq.n	80022fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002236:	4b4c      	ldr	r3, [pc, #304]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002242:	4b49      	ldr	r3, [pc, #292]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b08      	cmp	r3, #8
 800224c:	d11c      	bne.n	8002288 <HAL_RCC_OscConfig+0x18c>
 800224e:	4b46      	ldr	r3, [pc, #280]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d116      	bne.n	8002288 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	4b43      	ldr	r3, [pc, #268]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_RCC_OscConfig+0x176>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e1c0      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002272:	4b3d      	ldr	r3, [pc, #244]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4939      	ldr	r1, [pc, #228]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	e03a      	b.n	80022fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002290:	4b36      	ldr	r3, [pc, #216]	@ (800236c <HAL_RCC_OscConfig+0x270>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7ff fc55 	bl	8001b44 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229e:	f7ff fc51 	bl	8001b44 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e1a1      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4927      	ldr	r1, [pc, #156]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
 80022d0:	e015      	b.n	80022fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d2:	4b26      	ldr	r3, [pc, #152]	@ (800236c <HAL_RCC_OscConfig+0x270>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff fc34 	bl	8001b44 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e0:	f7ff fc30 	bl	8001b44 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e180      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d03a      	beq.n	8002380 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d019      	beq.n	8002346 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002312:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002318:	f7ff fc14 	bl	8001b44 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002320:	f7ff fc10 	bl	8001b44 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e160      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002332:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800233e:	2001      	movs	r0, #1
 8002340:	f000 fa9c 	bl	800287c <RCC_Delay>
 8002344:	e01c      	b.n	8002380 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002346:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234c:	f7ff fbfa 	bl	8001b44 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002352:	e00f      	b.n	8002374 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002354:	f7ff fbf6 	bl	8001b44 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d908      	bls.n	8002374 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e146      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
 800236c:	42420000 	.word	0x42420000
 8002370:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002374:	4b92      	ldr	r3, [pc, #584]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1e9      	bne.n	8002354 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80a6 	beq.w	80024da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002392:	4b8b      	ldr	r3, [pc, #556]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10d      	bne.n	80023ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	4b88      	ldr	r3, [pc, #544]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	4a87      	ldr	r2, [pc, #540]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	61d3      	str	r3, [r2, #28]
 80023aa:	4b85      	ldr	r3, [pc, #532]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b6:	2301      	movs	r3, #1
 80023b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	4b82      	ldr	r3, [pc, #520]	@ (80025c4 <HAL_RCC_OscConfig+0x4c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d118      	bne.n	80023f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c6:	4b7f      	ldr	r3, [pc, #508]	@ (80025c4 <HAL_RCC_OscConfig+0x4c8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a7e      	ldr	r2, [pc, #504]	@ (80025c4 <HAL_RCC_OscConfig+0x4c8>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d2:	f7ff fbb7 	bl	8001b44 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023da:	f7ff fbb3 	bl	8001b44 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b64      	cmp	r3, #100	@ 0x64
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e103      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	4b75      	ldr	r3, [pc, #468]	@ (80025c4 <HAL_RCC_OscConfig+0x4c8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d106      	bne.n	800240e <HAL_RCC_OscConfig+0x312>
 8002400:	4b6f      	ldr	r3, [pc, #444]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a6e      	ldr	r2, [pc, #440]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	e02d      	b.n	800246a <HAL_RCC_OscConfig+0x36e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0x334>
 8002416:	4b6a      	ldr	r3, [pc, #424]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a69      	ldr	r2, [pc, #420]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	4b67      	ldr	r3, [pc, #412]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a66      	ldr	r2, [pc, #408]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	f023 0304 	bic.w	r3, r3, #4
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	e01c      	b.n	800246a <HAL_RCC_OscConfig+0x36e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b05      	cmp	r3, #5
 8002436:	d10c      	bne.n	8002452 <HAL_RCC_OscConfig+0x356>
 8002438:	4b61      	ldr	r3, [pc, #388]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a60      	ldr	r2, [pc, #384]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	4b5e      	ldr	r3, [pc, #376]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a5d      	ldr	r2, [pc, #372]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	e00b      	b.n	800246a <HAL_RCC_OscConfig+0x36e>
 8002452:	4b5b      	ldr	r3, [pc, #364]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a5a      	ldr	r2, [pc, #360]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	4b58      	ldr	r3, [pc, #352]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4a57      	ldr	r2, [pc, #348]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d015      	beq.n	800249e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7ff fb67 	bl	8001b44 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7ff fb63 	bl	8001b44 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0b1      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	4b4b      	ldr	r3, [pc, #300]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0ee      	beq.n	800247a <HAL_RCC_OscConfig+0x37e>
 800249c:	e014      	b.n	80024c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7ff fb51 	bl	8001b44 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7ff fb4d 	bl	8001b44 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e09b      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	4b40      	ldr	r3, [pc, #256]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ee      	bne.n	80024a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d105      	bne.n	80024da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ce:	4b3c      	ldr	r3, [pc, #240]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4a3b      	ldr	r2, [pc, #236]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8087 	beq.w	80025f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e4:	4b36      	ldr	r3, [pc, #216]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d061      	beq.n	80025b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d146      	bne.n	8002586 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f8:	4b33      	ldr	r3, [pc, #204]	@ (80025c8 <HAL_RCC_OscConfig+0x4cc>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7ff fb21 	bl	8001b44 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002506:	f7ff fb1d 	bl	8001b44 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e06d      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002518:	4b29      	ldr	r3, [pc, #164]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800252c:	d108      	bne.n	8002540 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800252e:	4b24      	ldr	r3, [pc, #144]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	4921      	ldr	r1, [pc, #132]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002540:	4b1f      	ldr	r3, [pc, #124]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a19      	ldr	r1, [r3, #32]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	430b      	orrs	r3, r1
 8002552:	491b      	ldr	r1, [pc, #108]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002558:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <HAL_RCC_OscConfig+0x4cc>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff faf1 	bl	8001b44 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002566:	f7ff faed 	bl	8001b44 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e03d      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002578:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x46a>
 8002584:	e035      	b.n	80025f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <HAL_RCC_OscConfig+0x4cc>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7ff fada 	bl	8001b44 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7ff fad6 	bl	8001b44 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e026      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x498>
 80025b2:	e01e      	b.n	80025f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e019      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
 80025c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025cc:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <HAL_RCC_OscConfig+0x500>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d106      	bne.n	80025ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000

08002600 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0d0      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002614:	4b6a      	ldr	r3, [pc, #424]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d910      	bls.n	8002644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b67      	ldr	r3, [pc, #412]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	4965      	ldr	r1, [pc, #404]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b63      	ldr	r3, [pc, #396]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0b8      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800265c:	4b59      	ldr	r3, [pc, #356]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a58      	ldr	r2, [pc, #352]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002666:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002674:	4b53      	ldr	r3, [pc, #332]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a52      	ldr	r2, [pc, #328]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800267e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b50      	ldr	r3, [pc, #320]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	494d      	ldr	r1, [pc, #308]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d040      	beq.n	8002720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	4b47      	ldr	r3, [pc, #284]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d115      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e07f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026be:	4b41      	ldr	r3, [pc, #260]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e073      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ce:	4b3d      	ldr	r3, [pc, #244]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e06b      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026de:	4b39      	ldr	r3, [pc, #228]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f023 0203 	bic.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4936      	ldr	r1, [pc, #216]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f0:	f7ff fa28 	bl	8001b44 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	e00a      	b.n	800270e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f8:	f7ff fa24 	bl	8001b44 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e053      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	4b2d      	ldr	r3, [pc, #180]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 020c 	and.w	r2, r3, #12
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	429a      	cmp	r2, r3
 800271e:	d1eb      	bne.n	80026f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002720:	4b27      	ldr	r3, [pc, #156]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d210      	bcs.n	8002750 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b24      	ldr	r3, [pc, #144]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 0207 	bic.w	r2, r3, #7
 8002736:	4922      	ldr	r1, [pc, #136]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b20      	ldr	r3, [pc, #128]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e032      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800275c:	4b19      	ldr	r3, [pc, #100]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4916      	ldr	r1, [pc, #88]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800277a:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	490e      	ldr	r1, [pc, #56]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278e:	f000 f821 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002792:	4602      	mov	r2, r0
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	490a      	ldr	r1, [pc, #40]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	5ccb      	ldrb	r3, [r1, r3]
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	4a09      	ldr	r2, [pc, #36]	@ (80027cc <HAL_RCC_ClockConfig+0x1cc>)
 80027a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027aa:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <HAL_RCC_ClockConfig+0x1d0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f986 	bl	8001ac0 <HAL_InitTick>

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40022000 	.word	0x40022000
 80027c4:	40021000 	.word	0x40021000
 80027c8:	080030e0 	.word	0x080030e0
 80027cc:	20000030 	.word	0x20000030
 80027d0:	20000034 	.word	0x20000034

080027d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x94>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d002      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x30>
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d003      	beq.n	800280a <HAL_RCC_GetSysClockFreq+0x36>
 8002802:	e027      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002804:	4b19      	ldr	r3, [pc, #100]	@ (800286c <HAL_RCC_GetSysClockFreq+0x98>)
 8002806:	613b      	str	r3, [r7, #16]
      break;
 8002808:	e027      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	0c9b      	lsrs	r3, r3, #18
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	4a17      	ldr	r2, [pc, #92]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002814:	5cd3      	ldrb	r3, [r2, r3]
 8002816:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d010      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002822:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x94>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	0c5b      	lsrs	r3, r3, #17
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	4a11      	ldr	r2, [pc, #68]	@ (8002874 <HAL_RCC_GetSysClockFreq+0xa0>)
 800282e:	5cd3      	ldrb	r3, [r2, r3]
 8002830:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a0d      	ldr	r2, [pc, #52]	@ (800286c <HAL_RCC_GetSysClockFreq+0x98>)
 8002836:	fb03 f202 	mul.w	r2, r3, r2
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	e004      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a0c      	ldr	r2, [pc, #48]	@ (8002878 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	613b      	str	r3, [r7, #16]
      break;
 8002852:	e002      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b05      	ldr	r3, [pc, #20]	@ (800286c <HAL_RCC_GetSysClockFreq+0x98>)
 8002856:	613b      	str	r3, [r7, #16]
      break;
 8002858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285a:	693b      	ldr	r3, [r7, #16]
}
 800285c:	4618      	mov	r0, r3
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	007a1200 	.word	0x007a1200
 8002870:	080030f0 	.word	0x080030f0
 8002874:	08003100 	.word	0x08003100
 8002878:	003d0900 	.word	0x003d0900

0800287c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002884:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <RCC_Delay+0x34>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0a      	ldr	r2, [pc, #40]	@ (80028b4 <RCC_Delay+0x38>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	0a5b      	lsrs	r3, r3, #9
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002898:	bf00      	nop
  }
  while (Delay --);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1e5a      	subs	r2, r3, #1
 800289e:	60fa      	str	r2, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f9      	bne.n	8002898 <RCC_Delay+0x1c>
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	20000030 	.word	0x20000030
 80028b4:	10624dd3 	.word	0x10624dd3

080028b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e041      	b.n	800294e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7fe fd6c 	bl	80013bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f000 fa56 	bl	8002da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d001      	beq.n	8002970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e035      	b.n	80029dc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a16      	ldr	r2, [pc, #88]	@ (80029e8 <HAL_TIM_Base_Start_IT+0x90>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d009      	beq.n	80029a6 <HAL_TIM_Base_Start_IT+0x4e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800299a:	d004      	beq.n	80029a6 <HAL_TIM_Base_Start_IT+0x4e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a12      	ldr	r2, [pc, #72]	@ (80029ec <HAL_TIM_Base_Start_IT+0x94>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d111      	bne.n	80029ca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b06      	cmp	r3, #6
 80029b6:	d010      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c8:	e007      	b.n	80029da <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40012c00 	.word	0x40012c00
 80029ec:	40000400 	.word	0x40000400

080029f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d020      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01b      	beq.n	8002a54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0202 	mvn.w	r2, #2
 8002a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f998 	bl	8002d70 <HAL_TIM_IC_CaptureCallback>
 8002a40:	e005      	b.n	8002a4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f98b 	bl	8002d5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f99a 	bl	8002d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d020      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01b      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0204 	mvn.w	r2, #4
 8002a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2202      	movs	r2, #2
 8002a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f972 	bl	8002d70 <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f965 	bl	8002d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f974 	bl	8002d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d020      	beq.n	8002aec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0208 	mvn.w	r2, #8
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f94c 	bl	8002d70 <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f93f 	bl	8002d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f94e 	bl	8002d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d020      	beq.n	8002b38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01b      	beq.n	8002b38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0210 	mvn.w	r2, #16
 8002b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f926 	bl	8002d70 <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f919 	bl	8002d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f928 	bl	8002d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00c      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0201 	mvn.w	r2, #1
 8002b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe f936 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00c      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fa6f 	bl	800305e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00c      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d007      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8f8 	bl	8002d94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00c      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0220 	mvn.w	r2, #32
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fa42 	bl	800304c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_TIM_ConfigClockSource+0x1c>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e0b4      	b.n	8002d56 <HAL_TIM_ConfigClockSource+0x186>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c24:	d03e      	beq.n	8002ca4 <HAL_TIM_ConfigClockSource+0xd4>
 8002c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c2a:	f200 8087 	bhi.w	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c32:	f000 8086 	beq.w	8002d42 <HAL_TIM_ConfigClockSource+0x172>
 8002c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3a:	d87f      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c3c:	2b70      	cmp	r3, #112	@ 0x70
 8002c3e:	d01a      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0xa6>
 8002c40:	2b70      	cmp	r3, #112	@ 0x70
 8002c42:	d87b      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c44:	2b60      	cmp	r3, #96	@ 0x60
 8002c46:	d050      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0x11a>
 8002c48:	2b60      	cmp	r3, #96	@ 0x60
 8002c4a:	d877      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c4c:	2b50      	cmp	r3, #80	@ 0x50
 8002c4e:	d03c      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0xfa>
 8002c50:	2b50      	cmp	r3, #80	@ 0x50
 8002c52:	d873      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c54:	2b40      	cmp	r3, #64	@ 0x40
 8002c56:	d058      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x13a>
 8002c58:	2b40      	cmp	r3, #64	@ 0x40
 8002c5a:	d86f      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c5c:	2b30      	cmp	r3, #48	@ 0x30
 8002c5e:	d064      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x15a>
 8002c60:	2b30      	cmp	r3, #48	@ 0x30
 8002c62:	d86b      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d060      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x15a>
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d867      	bhi.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d05c      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x15a>
 8002c70:	2b10      	cmp	r3, #16
 8002c72:	d05a      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x15a>
 8002c74:	e062      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c86:	f000 f96a 	bl	8002f5e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	609a      	str	r2, [r3, #8]
      break;
 8002ca2:	e04f      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cb4:	f000 f953 	bl	8002f5e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cc6:	609a      	str	r2, [r3, #8]
      break;
 8002cc8:	e03c      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f000 f8ca 	bl	8002e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2150      	movs	r1, #80	@ 0x50
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f921 	bl	8002f2a <TIM_ITRx_SetConfig>
      break;
 8002ce8:	e02c      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f000 f8e8 	bl	8002ecc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2160      	movs	r1, #96	@ 0x60
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f911 	bl	8002f2a <TIM_ITRx_SetConfig>
      break;
 8002d08:	e01c      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	461a      	mov	r2, r3
 8002d18:	f000 f8aa 	bl	8002e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2140      	movs	r1, #64	@ 0x40
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f901 	bl	8002f2a <TIM_ITRx_SetConfig>
      break;
 8002d28:	e00c      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4619      	mov	r1, r3
 8002d34:	4610      	mov	r0, r2
 8002d36:	f000 f8f8 	bl	8002f2a <TIM_ITRx_SetConfig>
      break;
 8002d3a:	e003      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d40:	e000      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
	...

08002da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a2b      	ldr	r2, [pc, #172]	@ (8002e68 <TIM_Base_SetConfig+0xc0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d007      	beq.n	8002dd0 <TIM_Base_SetConfig+0x28>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc6:	d003      	beq.n	8002dd0 <TIM_Base_SetConfig+0x28>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a28      	ldr	r2, [pc, #160]	@ (8002e6c <TIM_Base_SetConfig+0xc4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d108      	bne.n	8002de2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a20      	ldr	r2, [pc, #128]	@ (8002e68 <TIM_Base_SetConfig+0xc0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <TIM_Base_SetConfig+0x52>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df0:	d003      	beq.n	8002dfa <TIM_Base_SetConfig+0x52>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e6c <TIM_Base_SetConfig+0xc4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d108      	bne.n	8002e0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a0d      	ldr	r2, [pc, #52]	@ (8002e68 <TIM_Base_SetConfig+0xc0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d103      	bne.n	8002e40 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f023 0201 	bic.w	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	611a      	str	r2, [r3, #16]
  }
}
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	40012c00 	.word	0x40012c00
 8002e6c:	40000400 	.word	0x40000400

08002e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f023 0201 	bic.w	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f023 030a 	bic.w	r3, r3, #10
 8002eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	621a      	str	r2, [r3, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f023 0210 	bic.w	r2, r3, #16
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	031b      	lsls	r3, r3, #12
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	621a      	str	r2, [r3, #32]
}
 8002f20:	bf00      	nop
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b085      	sub	sp, #20
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f043 0307 	orr.w	r3, r3, #7
 8002f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	609a      	str	r2, [r3, #8]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b087      	sub	sp, #28
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	021a      	lsls	r2, r3, #8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	609a      	str	r2, [r3, #8]
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e041      	b.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a14      	ldr	r2, [pc, #80]	@ (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d009      	beq.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003000:	d004      	beq.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a10      	ldr	r2, [pc, #64]	@ (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10c      	bne.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003012:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	4313      	orrs	r3, r2
 800301c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40000400 	.word	0x40000400

0800304c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <memset>:
 8003070:	4603      	mov	r3, r0
 8003072:	4402      	add	r2, r0
 8003074:	4293      	cmp	r3, r2
 8003076:	d100      	bne.n	800307a <memset+0xa>
 8003078:	4770      	bx	lr
 800307a:	f803 1b01 	strb.w	r1, [r3], #1
 800307e:	e7f9      	b.n	8003074 <memset+0x4>

08003080 <__libc_init_array>:
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	2600      	movs	r6, #0
 8003084:	4d0c      	ldr	r5, [pc, #48]	@ (80030b8 <__libc_init_array+0x38>)
 8003086:	4c0d      	ldr	r4, [pc, #52]	@ (80030bc <__libc_init_array+0x3c>)
 8003088:	1b64      	subs	r4, r4, r5
 800308a:	10a4      	asrs	r4, r4, #2
 800308c:	42a6      	cmp	r6, r4
 800308e:	d109      	bne.n	80030a4 <__libc_init_array+0x24>
 8003090:	f000 f81a 	bl	80030c8 <_init>
 8003094:	2600      	movs	r6, #0
 8003096:	4d0a      	ldr	r5, [pc, #40]	@ (80030c0 <__libc_init_array+0x40>)
 8003098:	4c0a      	ldr	r4, [pc, #40]	@ (80030c4 <__libc_init_array+0x44>)
 800309a:	1b64      	subs	r4, r4, r5
 800309c:	10a4      	asrs	r4, r4, #2
 800309e:	42a6      	cmp	r6, r4
 80030a0:	d105      	bne.n	80030ae <__libc_init_array+0x2e>
 80030a2:	bd70      	pop	{r4, r5, r6, pc}
 80030a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a8:	4798      	blx	r3
 80030aa:	3601      	adds	r6, #1
 80030ac:	e7ee      	b.n	800308c <__libc_init_array+0xc>
 80030ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b2:	4798      	blx	r3
 80030b4:	3601      	adds	r6, #1
 80030b6:	e7f2      	b.n	800309e <__libc_init_array+0x1e>
 80030b8:	08003104 	.word	0x08003104
 80030bc:	08003104 	.word	0x08003104
 80030c0:	08003104 	.word	0x08003104
 80030c4:	08003108 	.word	0x08003108

080030c8 <_init>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	bf00      	nop
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr

080030d4 <_fini>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr
